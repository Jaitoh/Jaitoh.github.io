<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jaitoh</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-07-23T18:18:17.878Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jaitoh</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[] &quot;2021CSSS_project.md&quot;</title>
    <link href="http://yoursite.com/2021/03/08/2021CSSS-project-md/"/>
    <id>http://yoursite.com/2021/03/08/2021CSSS-project-md/</id>
    <published>2021-03-08T16:29:45.000Z</published>
    <updated>2021-07-23T18:18:17.878Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="/image/title.png" alt=""></p><center>摘要</center><a id="more"></a><p>正文</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img data-src=&quot;/image/title.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;center&gt;摘要&lt;/center&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020HS - FDS - Summary</title>
    <link href="http://yoursite.com/2020/12/17/2020HS-FDS-Summary/"/>
    <id>http://yoursite.com/2020/12/17/2020HS-FDS-Summary/</id>
    <published>2020-12-17T13:48:04.000Z</published>
    <updated>2021-07-23T18:18:17.876Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><center><embed src="../../../../pdfs/summary_Foundations_of_Data_Science_2020.pdf" width="850" height="600"></center><!-- <object data="/blog/images/xxx.pdf" type="application/pdf" width="100%"> </object> -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;center&gt;&lt;embed src=&quot;../../../../pdfs/summary_Foundations_of_Data_Science_2020.pdf&quot; width=&quot;850&quot; height=&quot;600&quot;&gt;&lt;/center&gt;

&lt;!
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020HS - Programming - python notes</title>
    <link href="http://yoursite.com/2020/12/17/2020HS-Programming-python-notes/"/>
    <id>http://yoursite.com/2020/12/17/2020HS-Programming-python-notes/</id>
    <published>2020-12-17T13:37:11.000Z</published>
    <updated>2021-07-23T18:18:17.877Z</updated>
    
    <content type="html"><![CDATA[<center> </center><a id="more"></a><h1 id="week-1"><a href="#week-1" class="headerlink" title="week 1"></a>week 1</h1><p>There are many books and online tutorial and lecture notes about Python. You can use any of them. Here are some of them:</p><p>The Python Tutorial</p><p><a href="https://docs.python.org/3.6/tutorial/">https://docs.python.org/3.6/tutorial/</a></p><p>Introduction to Python</p><p>Part 1: <a href="http://www.slideshare.net/amiable_indian/introduction-to-python">http://www.slideshare.net/amiable_indian/introduction-to-python</a></p><p>Part 2: <a href="http://www.slideshare.net/amiable_indian/introduction-to-python-part-two">http://www.slideshare.net/amiable_indian/introduction-to-python-part-two</a></p><p>Part 3: <a href="http://www.slideshare.net/amiable_indian/introduction-to-python-part-three">http://www.slideshare.net/amiable_indian/introduction-to-python-part-three</a></p><p>Google’s Python Class</p><p><a href="https://developers.google.com/edu/python/?hl=en">https://developers.google.com/edu/python/?hl=en</a></p><p>How to think like a computer scientist</p><p><a href="http://interactivepython.org/courselib/static/thinkcspy/index.html">http://interactivepython.org/courselib/static/thinkcspy/index.html</a></p><h2 id="Python-operator-Precedence-PEMDAS-符号操作等级"><a href="#Python-operator-Precedence-PEMDAS-符号操作等级" class="headerlink" title="Python operator Precedence (PEMDAS) 符号操作等级"></a>Python operator Precedence (PEMDAS) 符号操作等级</h2><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>( )</td><td>(Parentheses)</td></tr><tr><td>**</td><td>Name = input(“please input your name here: “)</td></tr><tr><td>(Exponentiation)</td><td></td></tr><tr><td>-</td><td>(Negation)</td></tr><tr><td>* , %, /, //</td><td>(Multiplication, Remainder, Division Quotient, Floored quotient)</td></tr><tr><td>+, -</td><td>(Addition, Subtraction)</td></tr><tr><td>&gt;, &lt;, ==</td><td>(Comparison)</td></tr><tr><td>=</td><td>(Assign)</td></tr></tbody></table><p>Note: The operation with the same precedence are evaluated from left to right. (except for the <em>* operator we have it the other way around e.g. 2**3**4 == 2*\</em>(3**4).)</p><p>一般 从左至右<br>连续的** 从右往左</p><h1 id="week-2-数据类型-逻辑判断-list-代码可读性"><a href="#week-2-数据类型-逻辑判断-list-代码可读性" class="headerlink" title="week 2 数据类型 逻辑判断 list 代码可读性"></a>week 2 数据类型 逻辑判断 list 代码可读性</h1><h2 id="python数据类型-5"><a href="#python数据类型-5" class="headerlink" title="python数据类型:5"></a>python数据类型:5</h2><p><strong>NSLTD</strong><br>Number<br>string<br>List<br>Tuple<br>Dictionary</p><h2 id="逻辑判断-True-False-优先级"><a href="#逻辑判断-True-False-优先级" class="headerlink" title="逻辑判断 True False 优先级"></a>逻辑判断 True False 优先级</h2><p>( )<br>!=, ==, &lt;, &gt;, &lt;=, &gt;=,<br>not<br>and<br>or</p><h2 id="number与相互转换"><a href="#number与相互转换" class="headerlink" title="number与相互转换:"></a>number与相互转换:</h2><p>int / float</p><h2 id="List-列表-元素可以为任意形式"><a href="#List-列表-元素可以为任意形式" class="headerlink" title="List 列表 元素可以为任意形式"></a>List 列表 元素可以为任意形式</h2><p>list(range(4)) = [0,1,2,3]<br>list(range(0,4)) = [0,1,2,3]<br>list(range(0,4,2)) = [0,2]<br>[ ] -&gt; empty</p><p>获取列表内容 [int]<br>a[1]<br>a += [4] -&gt; 往列表最后添加一个元素</p><h2 id="Name-Binding-可改-不可改"><a href="#Name-Binding-可改-不可改" class="headerlink" title="Name Binding 可改/不可改 [ ]{ } / ( )"></a>Name Binding 可改/不可改 [ ]{ } / ( )</h2><p><a href="http://www.pythontutor.com/visualize.html#mode=edit">http://www.pythontutor.com/visualize.html#mode=edit</a></p><p><strong>mutable</strong> 可改的 -&gt; list / dictionary<br><strong>immutable</strong> 不可改的 -&gt; numbers / strings / tuples</p><p><strong>+=</strong> 直接更改原来的objects list / dict []/{} string/number/()不可直接更改<br>x = [1]<br>w = x<br>x += [2]</p><blockquote><blockquote><p>x = [1,2]<br>w = [1,2] </p></blockquote></blockquote><p><strong>+</strong> 先创建新的objects，应用原来的值，再做更改<br>x = [1]<br>w = x<br>x = x + [2]</p><blockquote><blockquote><p>x = [1,2]<br>w = [1] % 不更改原来的对象</p></blockquote></blockquote><h2 id="descriptive-identifiers-and-comments-代码可读性"><a href="#descriptive-identifiers-and-comments-代码可读性" class="headerlink" title="descriptive identifiers and comments 代码可读性"></a>descriptive identifiers and comments 代码可读性</h2><p><a href="https://www.python.org/dev/peps/pep-0008/#indentation">https://www.python.org/dev/peps/pep-0008/#indentation</a><br><a href="https://google.github.io/styleguide/pyguide.html">https://google.github.io/styleguide/pyguide.html</a></p><h1 id="week-3-操作符operators"><a href="#week-3-操作符operators" class="headerlink" title="week 3 操作符operators"></a>week 3 操作符operators</h1><h2 id="operators"><a href="#operators" class="headerlink" title="operators"></a>operators</h2><p>｜ operation符号 | 含义 ｜<br>｜—｜—｜<br>｜** | Exponentiation (raise to the power)｜<br>|~, +, - | Complement, unary plus and minus|<br>|<em>, /, %, // ｜ Multiply, divide, modulo and floor division|<br>|+, -｜Addition and subtraction|<br>|&gt;&gt;, &lt;&lt;｜ Right and left bitwise shift<br>&amp;｜Bitwise ‘AND’|<br>|^, | ｜Bitwise exclusivedd ‘OR’ and regular ‘OR’|<br>|&lt;=, &lt;, &gt;, &gt;=｜Comparison operators|<br>|==, !=｜Equality operators|<br>|=, %=, /=, //=, -=, +=, *=, *</em>=｜Assignment operators|<br>|is, is not｜Identity operators|<br>|in, not in｜Membership operators|<br>|not, or, and｜Logical operators|</p><h1 id="week-4-循环-函数"><a href="#week-4-循环-函数" class="headerlink" title="week 4 循环 函数"></a>week 4 循环 函数</h1><h2 id="loops"><a href="#loops" class="headerlink" title="loops"></a>loops</h2><h3 id="for-loop"><a href="#for-loop" class="headerlink" title="for loop"></a>for loop</h3><ol><li>for number in range(start, end+1):</li><li>for string_element in list_of_strings:</li><li>for letter in a_string:</li><li>for position, value in enumerate(list):</li><li>list comprehension<br>5.1 operation inside: [operation_like_x**2 for x in range(10) if x%2 == 0]<br>5.2 if_else inside: length = [‘short’ if len(x)&lt;5 else ‘long’ for x in names]</li></ol><h3 id="while-loop"><a href="#while-loop" class="headerlink" title="while loop"></a>while loop</h3><ol><li>unknown number of iteration</li><li>get user input<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">answer = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">while</span> answer.lower() <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&#x27;yes&#x27;</span>, <span class="string">&#x27;no&#x27;</span>]:</span><br><span class="line">  answer = input(<span class="string">&#x27;Would you like to delete previous changes? (yes|no): &#x27;</span>)</span><br></pre></td></tr></table></figure></li><li>numeric algorithms - till close enough</li></ol><h3 id="continue-and-break"><a href="#continue-and-break" class="headerlink" title="continue and break"></a>continue and break</h3><ol><li>continue<br>continue 跳过该次循环内 之后的指令 进行下一次循环</li><li>break<br>break 跳过当前执行的循环，执行循环之后的语句</li></ol><h3 id="nested-loops"><a href="#nested-loops" class="headerlink" title="nested loops"></a>nested loops</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&quot;The following numbers are prime: &quot;</span>)</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">101</span>):</span><br><span class="line">    is_prime = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n):</span><br><span class="line">        <span class="keyword">if</span> n%i == <span class="number">0</span>:</span><br><span class="line">            is_prime = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span>            <span class="comment"># leave the inner loop</span></span><br><span class="line">    <span class="keyword">if</span> is_prime:</span><br><span class="line">        print(n)</span><br></pre></td></tr></table></figure><h2 id="functions"><a href="#functions" class="headerlink" title="functions"></a>functions</h2><p>第一行的string被当作是 docstring注解 不予以执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate</span>(<span class="params">f, x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Take a function f and evaluate it at x.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> f(x)</span><br><span class="line"></span><br><span class="line">evaluate(abs, <span class="number">-3</span>)</span><br><span class="line">&gt; <span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>(<span class="params">name=None</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print a greeting.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    If `name` is provided, the greeting addressed to a specific person</span></span><br><span class="line"><span class="string">    otherwise is says &#x27;Hello World&#x27;.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        name: (str) Name of the person (defaults to None).</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        print(<span class="string">&#x27;Hello World.&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;Hello, &#123;&#125;. Nice to see you!&#x27;</span>.format(name))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">hello()</span><br><span class="line">&gt; Hello World.</span><br><span class="line"></span><br><span class="line">hello(<span class="string">&#x27;Alice&#x27;</span>)</span><br><span class="line">&gt; Hello, Alice. Nice to see you!</span><br><span class="line"></span><br><span class="line">help(hello)</span><br><span class="line">&gt; Help on function hello <span class="keyword">in</span> module __main__:</span><br><span class="line">&gt; </span><br><span class="line">&gt; hello(name=<span class="literal">None</span>)</span><br><span class="line">&gt;     Print a greeting.</span><br><span class="line">&gt;     </span><br><span class="line">&gt;     If `name` <span class="keyword">is</span> provided, the greeting addressed to a specific person</span><br><span class="line">&gt;     otherwise <span class="keyword">is</span> says <span class="string">&#x27;Hello World&#x27;</span>.</span><br><span class="line">&gt;     </span><br><span class="line">&gt;     Args:</span><br><span class="line">&gt;         name: (str) Name of the person (defaults to <span class="literal">None</span>).</span><br><span class="line">&gt; (END) </span><br></pre></td></tr></table></figure><h3 id="lambda-function"><a href="#lambda-function" class="headerlink" title="lambda function"></a>lambda function</h3><p>anonymous function - have no name - 只需要用一次该函数，并不需要命名它<br><code>lambda arguments: return value</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate</span>(<span class="params">f, x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Take a function f and evaluate it at x.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> f(x)</span><br><span class="line">evaluate(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, <span class="number">-3</span>)</span><br></pre></td></tr></table></figure><h3 id="positional-argument"><a href="#positional-argument" class="headerlink" title="positional argument"></a>positional argument</h3><h3 id="keyword-argument-默认值"><a href="#keyword-argument-默认值" class="headerlink" title="keyword argument 默认值"></a>keyword argument 默认值</h3><p><code>def say_hi(name, comment=None, shout=False)</code><br>赋予默认值， 调用时，参数顺序随意， 没有specified 需要优先并按序赋值<br>函数调用时候，可以用相同的函数名赋值并调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remainder</span>(<span class="params">number, divisor</span>):</span></span><br><span class="line">    result = number % divisor</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">result = remainder(<span class="number">20</span>, <span class="number">7</span>)</span><br><span class="line">result = remainder(<span class="number">20</span>, divisor=<span class="number">7</span>)</span><br><span class="line">result = remainder(number=<span class="number">20</span>, divisor=<span class="number">7</span>)</span><br></pre></td></tr></table></figure><h3 id="注释变量类型"><a href="#注释变量类型" class="headerlink" title="注释变量类型"></a>注释变量类型</h3><p>help(say_hi)会自动注解，但python不会检查对应类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hi</span>(<span class="params">name:str, age:int=<span class="number">0</span></span>) -&gt; str:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;an example function.&quot;&quot;&quot;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure><p>name 为str， age为int，返回str</p><h3 id="None"><a href="#None" class="headerlink" title="None"></a>None</h3><ol><li>判定是否为none: <code>if a is None:</code> return 无返回值 默认返回None</li><li>代表 未完成值</li><li>list mutable 可变 需要利用None作为 函数变量默认值 给list重新赋值<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">append</span>(<span class="params">x, _list=[]</span>):</span></span><br><span class="line"> _list.append(x)</span><br><span class="line"> <span class="keyword">return</span> _list</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">append</span>(<span class="params">x, _list=None</span>):</span></span><br><span class="line"> <span class="keyword">if</span> _list <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">     _list = []</span><br><span class="line"> </span><br><span class="line"> _list.append(x)</span><br><span class="line"> <span class="keyword">return</span> _list</span><br></pre></td></tr></table></figure></li></ol><h1 id="exercise"><a href="#exercise" class="headerlink" title="exercise"></a>exercise</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 习题收集</span></span><br><span class="line"><span class="comment"># Fixed Point Iteration</span></span><br><span class="line"><span class="comment"># https://mnf.openedx.uzh.ch/courses/course-v1:MNF+MAT101+2020_T1/courseware/bba8c53b6e174478be1a64929ef03109/fabea1ef2c814cdfbeebd792d875a93e/?child=first</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fixed_point</span>(<span class="params">x_0</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Find a root of the equation -0.5*x^3 + 1.45*x^2 - 1.32*x + 0.378 using fixed point.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        x_0 (float): initial point for iteration.</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        float: approximated root up to 1e-8.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">z</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-.5</span>*x**<span class="number">3</span> + <span class="number">1.45</span>*x**<span class="number">2</span> - <span class="number">1.32</span>*x + <span class="number">0.378</span> + x</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    N = <span class="number">100</span></span><br><span class="line">    eps = <span class="number">1e-8</span></span><br><span class="line">    </span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    error = float(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">    x = x_0</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (i &lt;= N) <span class="keyword">and</span> (error &gt; eps):</span><br><span class="line">        <span class="keyword">if</span> x**<span class="number">2</span> &gt; <span class="number">1e5</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Does not converge.&#x27;</span></span><br><span class="line">        x_old, x = x, f(x)</span><br><span class="line">        error = abs(x - x_old)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="week-5-自定义模块import-基本modules-math-fraction-random-namespace"><a href="#week-5-自定义模块import-基本modules-math-fraction-random-namespace" class="headerlink" title="week 5 自定义模块import 基本modules - math/fraction/random/namespace"></a>week 5 自定义模块import 基本modules - math/fraction/random/namespace</h1><h2 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h2><p>调用其他.py文件中定义的函数<br>e.g.</p><p>my_function.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; This script consists of two functions.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sum_function(): receive a list of numbers and calculate the sum of them.</span></span><br><span class="line"><span class="string">fibonacci(): receive n and calculate the first n numbers in fibonacci sequence.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_function</span>(<span class="params">list_of_numbers</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Calculate the sum of numbers in the given list.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        list_of_numbers (list): A list of numbers</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        float: The sum of numbers in the list</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">    summation = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> list_of_numbers:</span><br><span class="line">        summation = summation + number</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;The sum is: &quot;</span>, summation</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span>(<span class="params">n</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Calculate the first n fibonacci numbers.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        n(int): a positive integer</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        int: The first n numbers in Fibonacci sequence</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    a_1 = <span class="number">1</span></span><br><span class="line">    a_2 = <span class="number">1</span></span><br><span class="line">    print(a_1, a_2, end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    index = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> index &lt; n:</span><br><span class="line">        a_n = a_1 + a_2</span><br><span class="line">        print(a_n, end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        a_1 = a_2</span><br><span class="line">        a_2 = a_n</span><br><span class="line">        index += <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><blockquote><p>import my_function<br>help(my_function)<br>or<br>from my_function import finonacci<br>help(finonacci)<br>from my_function import *</p></blockquote></blockquote><p>my_function.sum_function(list_of_numbers)</p><h2 id="Basic-modules"><a href="#Basic-modules" class="headerlink" title="Basic modules"></a>Basic modules</h2><h3 id="math"><a href="#math" class="headerlink" title="math"></a>math</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">dir(math)</span><br><span class="line">help(math)</span><br></pre></td></tr></table></figure><h4 id="constants"><a href="#constants" class="headerlink" title="constants"></a>constants</h4><p>math.pi / math.e</p><h4 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h4><p>math.sin(0) / math.cos / tan / asin / acos / atan </p><h4 id="角度弧度"><a href="#角度弧度" class="headerlink" title="角度弧度"></a>角度弧度</h4><p>math.radians(60) / math.degrees(math.pi/4)</p><h4 id="根号"><a href="#根号" class="headerlink" title="根号"></a>根号</h4><p>math.sqrt(4)</p><h4 id="floor-and-ceil"><a href="#floor-and-ceil" class="headerlink" title="floor and ceil"></a>floor and ceil</h4><p>math.floor / ceil</p><h4 id="指数和对数"><a href="#指数和对数" class="headerlink" title="指数和对数"></a>指数和对数</h4><p>math.log(16,2)<br>math.log(1000,10)</p><p>math.exp(4)<br>math.e**4</p><h4 id="factorials-级数"><a href="#factorials-级数" class="headerlink" title="factorials 级数"></a>factorials 级数</h4><p>math.factorial(10) # 10!</p><h3 id="fraction"><a href="#fraction" class="headerlink" title="fraction"></a>fraction</h3><p>import fractions</p><ol><li>fractions.Fraction(int1,int2) == int1/int2</li><li>fractions.Fraction(5)  == 5/1</li><li>fractions.Fraction()  == 0/1</li><li>frac1 = fractions.Fraction(0.5)  == 1/2</li><li>frac1.numerator / denominator</li><li>-&gt; float: float_7 = float(frac_7)</li><li>print(2**fract_7) -&gt; float</li><li>print(float+frac) -&gt; float</li><li>print(1.0 + frac) -&gt; float</li><li>fract1.limit_denominator(10)</li><li>create from string: fractions.Fraction(“2/3”)</li></ol><h3 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h3><ol><li>random.choice([‘spider’, ‘tiger’, ‘dog’, ‘cat’, ‘fish’])</li><li>random.choice(“CheckMethodChoiceFromModuleRandom”)</li><li>random.choice(range(100))</li><li>random.randrange(10, 99, 2) -&gt; return a selected element from range([start,] stop[, step]) start and step parameters are optional</li><li>random.randint(a,b) [a,…,b] (range(1,6) -&gt; [1,2,3,4,5] randrange(1,6) -&gt; upto 1,..,5)</li><li>random.sample(range(100),5) 选择5个样本</li><li>random.random() 返回 [0.0, 1.0)中的一个值</li><li>random.uniform(a,b) 返回 N: a &lt;= N &lt;= b (a&lt;b) 返回 N: b &lt;= N &lt;= a (b&lt;a)</li></ol><h3 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h3><p>function 的local namespace 会在调用后 被删除</p><h1 id="week-6-list列表操作-string及操作-encoding-ord-chr"><a href="#week-6-list列表操作-string及操作-encoding-ord-chr" class="headerlink" title="week 6 list列表操作 string及操作 encoding ord/chr"></a>week 6 list列表操作 string及操作 encoding ord/chr</h1><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><h3 id="List-manipulation"><a href="#List-manipulation" class="headerlink" title="List manipulation"></a>List manipulation</h3><p>listname.manipulation_function():</p><ol><li>.insert(i,x) -&gt; insert x in position i</li><li>.append(x)</li><li>.remove(x) -&gt; remove the first item with value x</li><li>.pop() or .pop(i) -&gt; remove the item at the given position in the list and return it</li><li>.extend(L) -&gt; extend the list by append all the elements in the given list L</li><li>.sort() </li><li>.reverse()</li><li>.index(x) -&gt; return index of the first x</li><li>.count(x) -&gt; return the number of times x appears in the list</li><li>help(my_list)</li></ol><h3 id="List-slicing"><a href="#List-slicing" class="headerlink" title="List slicing"></a>List slicing</h3><p>my_list[start:end:step]<br>my_list[:]</p><h2 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h2><h3 id="strings"><a href="#strings" class="headerlink" title="strings"></a>strings</h3><ol><li><p>concatenation<br>1.1 print(“ “.join([x, y]))<br>1.2 print(x+y)<br>1.3 长段str<br> x = (‘Three Rings for the Elven-kings under the sky, ‘</p><pre><code>&apos;Seven for the Dwarf-lords in halls of stone, &apos;&apos;Nine for Mortal Men, doomed to die, &apos;&apos;One for the Dark Lord on his dark throne &apos;&apos;In the Land of Mordor where the Shadows lie.\n&apos;&apos;One Ring to rule them all, One Ring to find them, &apos;&apos;One Ring to bring them all and in the darkness bind them.&apos;)</code></pre></li><li><p>repetition 乘法</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">&#x27;Go!&#x27;</span></span><br><span class="line">y = x * <span class="number">3</span></span><br><span class="line">print(y)</span><br></pre></td></tr></table></figure></li><li><p>escape sequences<br>\t<br>\r<br>\n<br>\v<br>\a<br>\b<br>\f<br>\<br>&#39;<br>&quot;<br>\uxxxx<br>\x0058</p></li></ol><h3 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h3><p>help(my_list)<br>string.count(sub[, start[, end]])<br>string.replace(old, new[, count])<br>string.split([sep[, maxsplit]])<br>string.capitalize() -&gt; 第一个大写，其余的变成小写<br>string.find(sub [, start [, end]]) -&gt; 返回sub 第一次 出现的位置<br>string.rfind(sub [, start [, end]]) -&gt; 返回sub 最后一次 出现的位置<br>string.index()<br>string.lower()<br>string.upper()<br>string.islower()<br>string.isupper()<br>string.join(word[, sep])</p><h3 id="encoding"><a href="#encoding" class="headerlink" title="encoding"></a>encoding</h3><ol><li><p>binary</p></li><li><p>hexadecimal</p></li><li><p>real numbers<br>mantissa*base^(exponent)<br> 1bit  -&gt; sign<br> 11bit -&gt; exponent from 2^-1023 - 2^1024<br> 52bit -&gt; mantissa 小数点前不能为0 只能为1-9</p></li><li><p>character encoding - ord( )/chr( )</p><ol><li>ASCII</li><li>UTF-8 *<br>add the <code># -*- coding: utf-8 -*-</code> as the first or second line of the python script</li></ol></li></ol><h1 id="week-7-Pandas"><a href="#week-7-Pandas" class="headerlink" title="week 7 Pandas"></a>week 7 Pandas</h1><h2 id="Pandas-R-gt-python"><a href="#Pandas-R-gt-python" class="headerlink" title="Pandas (R-&gt;python)"></a>Pandas (R-&gt;python)</h2><p><a href="https://pandas.pydata.org/docs/user_guide/10min.html#object-creation">https://pandas.pydata.org/docs/user_guide/10min.html#object-creation</a></p><p>不仅是数，字符串/时间序列<br>数据类型</p><ul><li>Series    一维，带标签数组</li><li>DataFrame 二维，Series容器</li></ul><h3 id="指令合集"><a href="#指令合集" class="headerlink" title="指令合集"></a>指令合集</h3><h4 id="Object-creation"><a href="#Object-creation" class="headerlink" title="Object creation"></a>Object creation</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create series</span></span><br><span class="line">s = pd.Series([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, np.nan, <span class="number">6</span>, <span class="number">8</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: dates = pd.date_range(<span class="string">&#x27;20130101&#x27;</span>, periods=<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create dataframe</span></span><br><span class="line">In [<span class="number">7</span>]: df = pd.DataFrame(np.random.randn(<span class="number">6</span>, <span class="number">4</span>), index=dates, columns=list(<span class="string">&#x27;ABCD&#x27;</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: df2 = pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>: <span class="number">1.</span>,</span><br><span class="line">   ...:                     <span class="string">&#x27;B&#x27;</span>: pd.Timestamp(<span class="string">&#x27;20130102&#x27;</span>),</span><br><span class="line">   ...:                     <span class="string">&#x27;C&#x27;</span>: pd.Series(<span class="number">1</span>, index=list(range(<span class="number">4</span>)), dtype=<span class="string">&#x27;float32&#x27;</span>),</span><br><span class="line">   ...:                     <span class="string">&#x27;D&#x27;</span>: np.array([<span class="number">3</span>] * <span class="number">4</span>, dtype=<span class="string">&#x27;int32&#x27;</span>),</span><br><span class="line">   ...:                     <span class="string">&#x27;E&#x27;</span>: pd.Categorical([<span class="string">&quot;test&quot;</span>, <span class="string">&quot;train&quot;</span>, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;train&quot;</span>]),</span><br><span class="line">   ...:                     <span class="string">&#x27;F&#x27;</span>: <span class="string">&#x27;foo&#x27;</span>&#125;)</span><br><span class="line">   ...: </span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据类型</span></span><br><span class="line">In [<span class="number">11</span>]: df2.dtypes</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="viewing-data"><a href="#viewing-data" class="headerlink" title="viewing data"></a>viewing data</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">df.head()</span><br><span class="line">df.tail(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># display index and colomns</span></span><br><span class="line">df.index</span><br><span class="line">df.columns</span><br><span class="line"></span><br><span class="line"><span class="comment"># transfer to numpy</span></span><br><span class="line">df.to_numpy()</span><br><span class="line"></span><br><span class="line"><span class="comment"># symmary of the data</span></span><br><span class="line">df.describe()</span><br><span class="line"></span><br><span class="line"><span class="comment"># transpose of data</span></span><br><span class="line">df.T</span><br><span class="line"></span><br><span class="line"><span class="comment"># sort by index</span></span><br><span class="line">df.sort_index(axis = <span class="number">1</span>, ascending = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sort by values</span></span><br><span class="line">df.sort_values(by = <span class="string">&quot;B&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="Selection"><a href="#Selection" class="headerlink" title="Selection"></a>Selection</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># select a single column -&gt; a series</span></span><br><span class="line">df[<span class="string">&quot;A&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Selecting via [], which slices the rows. 切片行</span></span><br><span class="line">df[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">df[<span class="string">&#x27;20130102&#x27;</span>:<span class="string">&#x27;20130104&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># selection by label</span></span><br><span class="line">df.loc[dates[<span class="number">0</span>]]</span><br><span class="line">df.loc[:, [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]]</span><br><span class="line">df.loc[<span class="string">&#x27;20130102&#x27;</span>:<span class="string">&#x27;20130104&#x27;</span>, [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]]</span><br><span class="line">df.loc[<span class="string">&#x27;20130102&#x27;</span>, [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]]</span><br><span class="line">df.loc[dates[<span class="number">0</span>], <span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">df.at[dates[<span class="number">0</span>], <span class="string">&#x27;A&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># selection by position</span></span><br><span class="line">df.iloc[<span class="number">3</span>]</span><br><span class="line">df.iloc[<span class="number">3</span>:<span class="number">5</span>, <span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">df.iloc[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>], [<span class="number">0</span>, <span class="number">2</span>]]</span><br><span class="line">df.iloc[<span class="number">1</span>:<span class="number">3</span>, :]</span><br><span class="line">df.iloc[:, <span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">df.iloc[<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">df.iat[<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># boolean indexing</span></span><br><span class="line">df[df[<span class="string">&#x27;A&#x27;</span>] &gt; <span class="number">0</span>]</span><br><span class="line">df[df &gt; <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># filtering isin()</span></span><br><span class="line">df2 = df.copy()</span><br><span class="line">df2[<span class="string">&#x27;E&#x27;</span>] = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>, <span class="string">&#x27;four&#x27;</span>, <span class="string">&#x27;three&#x27;</span>]</span><br><span class="line"></span><br><span class="line">Out[<span class="number">43</span>]: </span><br><span class="line">                   A         B         C         D      E</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>  <span class="number">0.469112</span> <span class="number">-0.282863</span> <span class="number">-1.509059</span> <span class="number">-1.135632</span>    one</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span> <span class="number">-0.173215</span>  <span class="number">0.119209</span> <span class="number">-1.044236</span>    one</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-0.861849</span> <span class="number">-2.104569</span> <span class="number">-0.494929</span>  <span class="number">1.071804</span>    two</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">0.721555</span> <span class="number">-0.706771</span> <span class="number">-1.039575</span>  <span class="number">0.271860</span>  three</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span> <span class="number">-0.424972</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span> <span class="number">-1.087401</span>   four</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-06</span> <span class="number">-0.673690</span>  <span class="number">0.113648</span> <span class="number">-1.478427</span>  <span class="number">0.524988</span>  three</span><br><span class="line"></span><br><span class="line">df2[df2[<span class="string">&#x27;E&#x27;</span>].isin([<span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;four&#x27;</span>])]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># setting</span></span><br><span class="line">s1 = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], index=pd.date_range(<span class="string">&#x27;20130102&#x27;</span>, periods=<span class="number">6</span>))</span><br><span class="line">Out[<span class="number">46</span>]: </span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>    <span class="number">1</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span>    <span class="number">2</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>    <span class="number">3</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span>    <span class="number">4</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-06</span>    <span class="number">5</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-07</span>    <span class="number">6</span></span><br><span class="line">Freq: D, dtype: int64</span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;F&#x27;</span>] = s1</span><br><span class="line">df.at[dates[<span class="number">0</span>], <span class="string">&#x27;A&#x27;</span>] = <span class="number">0</span></span><br><span class="line">df.iat[<span class="number">0</span>, <span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">df.loc[:, <span class="string">&#x27;D&#x27;</span>] = np.array([<span class="number">5</span>] * len(df))</span><br><span class="line">Out[<span class="number">51</span>]: </span><br><span class="line">                   A         B         C  D    F</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>  <span class="number">0.000000</span>  <span class="number">0.000000</span> <span class="number">-1.509059</span>  <span class="number">5</span>  NaN</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span> <span class="number">-0.173215</span>  <span class="number">0.119209</span>  <span class="number">5</span>  <span class="number">1.0</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-0.861849</span> <span class="number">-2.104569</span> <span class="number">-0.494929</span>  <span class="number">5</span>  <span class="number">2.0</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">0.721555</span> <span class="number">-0.706771</span> <span class="number">-1.039575</span>  <span class="number">5</span>  <span class="number">3.0</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span> <span class="number">-0.424972</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span>  <span class="number">5</span>  <span class="number">4.0</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-06</span> <span class="number">-0.673690</span>  <span class="number">0.113648</span> <span class="number">-1.478427</span>  <span class="number">5</span>  <span class="number">5.0</span></span><br><span class="line"></span><br><span class="line">df2 = df.copy()</span><br><span class="line">df2[df2 &gt; <span class="number">0</span>] = -df2</span><br><span class="line">df2</span><br><span class="line">Out[<span class="number">54</span>]: </span><br><span class="line">                   A         B         C  D    F</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>  <span class="number">0.000000</span>  <span class="number">0.000000</span> <span class="number">-1.509059</span> <span class="number">-5</span>  NaN</span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span> <span class="number">-1.212112</span> <span class="number">-0.173215</span> <span class="number">-0.119209</span> <span class="number">-5</span> <span class="number">-1.0</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-0.861849</span> <span class="number">-2.104569</span> <span class="number">-0.494929</span> <span class="number">-5</span> <span class="number">-2.0</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span> <span class="number">-0.721555</span> <span class="number">-0.706771</span> <span class="number">-1.039575</span> <span class="number">-5</span> <span class="number">-3.0</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-05</span> <span class="number">-0.424972</span> <span class="number">-0.567020</span> <span class="number">-0.276232</span> <span class="number">-5</span> <span class="number">-4.0</span></span><br><span class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-06</span> <span class="number">-0.673690</span> <span class="number">-0.113648</span> <span class="number">-1.478427</span> <span class="number">-5</span> <span class="number">-5.0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="missing-data"><a href="#missing-data" class="headerlink" title="missing data"></a>missing data</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># np.nan to represent missing data</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># To drop any rows that have missing data.</span></span><br><span class="line">df1.dropna(how=<span class="string">&#x27;any&#x27;</span>)</span><br><span class="line"><span class="comment"># filling missing data</span></span><br><span class="line">df1.fillna(value=<span class="number">5</span>)</span><br><span class="line"><span class="comment"># To get the boolean mask where values are nan.</span></span><br><span class="line">pd.isna(df1)</span><br></pre></td></tr></table></figure><h3 id="operations"><a href="#operations" class="headerlink" title="operations"></a>operations</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stats</span></span><br><span class="line">df.mean()</span><br><span class="line"><span class="comment"># same operation on the other axis</span></span><br><span class="line">df.mean(<span class="number">1</span>)</span><br><span class="line">df.sub(s,axis = <span class="string">&quot;index&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># apply funtions to the data</span></span><br><span class="line">df.apply(np.cumsum)</span><br><span class="line">df.apply(<span class="keyword">lambda</span> x: x.max() - x.min())</span><br><span class="line"></span><br><span class="line"><span class="comment"># histogramming</span></span><br><span class="line">s.value_counts()</span><br><span class="line"></span><br><span class="line"><span class="comment"># string methods</span></span><br><span class="line">s.str.lower()</span><br></pre></td></tr></table></figure><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># concat</span></span><br><span class="line">df.concat(pieces)</span><br><span class="line"></span><br><span class="line"><span class="comment"># join</span></span><br><span class="line">pd.merge(left,right,on=<span class="string">&quot;key&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="grouping"><a href="#grouping" class="headerlink" title="grouping"></a>grouping</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># splitting</span></span><br><span class="line"><span class="comment"># applying</span></span><br><span class="line"><span class="comment"># combining</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">87</span>]: df = pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>: [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">   ....:                          <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>],</span><br><span class="line">   ....:                    <span class="string">&#x27;B&#x27;</span>: [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>,</span><br><span class="line">   ....:                          <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;three&#x27;</span>],</span><br><span class="line">   ....:                    <span class="string">&#x27;C&#x27;</span>: np.random.randn(<span class="number">8</span>),</span><br><span class="line">   ....:                    <span class="string">&#x27;D&#x27;</span>: np.random.randn(<span class="number">8</span>)&#125;)</span><br><span class="line">   ....: </span><br><span class="line"></span><br><span class="line">In [<span class="number">88</span>]: df</span><br><span class="line">Out[<span class="number">88</span>]: </span><br><span class="line">     A      B         C         D</span><br><span class="line"><span class="number">0</span>  foo    one  <span class="number">1.346061</span> <span class="number">-1.577585</span></span><br><span class="line"><span class="number">1</span>  bar    one  <span class="number">1.511763</span>  <span class="number">0.396823</span></span><br><span class="line"><span class="number">2</span>  foo    two  <span class="number">1.627081</span> <span class="number">-0.105381</span></span><br><span class="line"><span class="number">3</span>  bar  three <span class="number">-0.990582</span> <span class="number">-0.532532</span></span><br><span class="line"><span class="number">4</span>  foo    two <span class="number">-0.441652</span>  <span class="number">1.453749</span></span><br><span class="line"><span class="number">5</span>  bar    two  <span class="number">1.211526</span>  <span class="number">1.208843</span></span><br><span class="line"><span class="number">6</span>  foo    one  <span class="number">0.268520</span> <span class="number">-0.080952</span></span><br><span class="line"><span class="number">7</span>  foo  three  <span class="number">0.024580</span> <span class="number">-0.264610</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [<span class="number">89</span>]: df.groupby(<span class="string">&#x27;A&#x27;</span>).sum()</span><br><span class="line">Out[<span class="number">89</span>]: </span><br><span class="line">            C         D</span><br><span class="line">A                      </span><br><span class="line">bar  <span class="number">1.732707</span>  <span class="number">1.073134</span></span><br><span class="line">foo  <span class="number">2.824590</span> <span class="number">-0.574779</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">90</span>]: df.groupby([<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]).sum()</span><br><span class="line">Out[<span class="number">90</span>]: </span><br><span class="line">                  C         D</span><br><span class="line">A   B                        </span><br><span class="line">bar one    <span class="number">1.511763</span>  <span class="number">0.396823</span></span><br><span class="line">    three <span class="number">-0.990582</span> <span class="number">-0.532532</span></span><br><span class="line">    two    <span class="number">1.211526</span>  <span class="number">1.208843</span></span><br><span class="line">foo one    <span class="number">1.614581</span> <span class="number">-1.658537</span></span><br><span class="line">    three  <span class="number">0.024580</span> <span class="number">-0.264610</span></span><br><span class="line">    two    <span class="number">1.185429</span>  <span class="number">1.348368</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="reshaping"><a href="#reshaping" class="headerlink" title="reshaping"></a>reshaping</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stack 堆叠</span></span><br><span class="line">In [<span class="number">91</span>]: tuples = list(zip(*[[<span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;baz&#x27;</span>, <span class="string">&#x27;baz&#x27;</span>,</span><br><span class="line">   ....:                      <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;qux&#x27;</span>, <span class="string">&#x27;qux&#x27;</span>],</span><br><span class="line">   ....:                     [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>,</span><br><span class="line">   ....:                      <span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>]]))</span><br><span class="line">   ....: </span><br><span class="line"></span><br><span class="line">In [<span class="number">92</span>]: index = pd.MultiIndex.from_tuples(tuples, names=[<span class="string">&#x27;first&#x27;</span>, <span class="string">&#x27;second&#x27;</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">93</span>]: df = pd.DataFrame(np.random.randn(<span class="number">8</span>, <span class="number">2</span>), index=index, columns=[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">94</span>]: df2 = df[:<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">95</span>]: df2</span><br><span class="line">Out[<span class="number">95</span>]: </span><br><span class="line">                     A         B</span><br><span class="line">first second                    </span><br><span class="line">bar   one    <span class="number">-0.727965</span> <span class="number">-0.589346</span></span><br><span class="line">      two     <span class="number">0.339969</span> <span class="number">-0.693205</span></span><br><span class="line">baz   one    <span class="number">-0.339355</span>  <span class="number">0.593616</span></span><br><span class="line">      two     <span class="number">0.884345</span>  <span class="number">1.591431</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">96</span>]: stacked = df2.stack()</span><br><span class="line"></span><br><span class="line">In [<span class="number">97</span>]: stacked</span><br><span class="line">Out[<span class="number">97</span>]: </span><br><span class="line">first  second   </span><br><span class="line">bar    one     A   <span class="number">-0.727965</span></span><br><span class="line">               B   <span class="number">-0.589346</span></span><br><span class="line">       two     A    <span class="number">0.339969</span></span><br><span class="line">               B   <span class="number">-0.693205</span></span><br><span class="line">baz    one     A   <span class="number">-0.339355</span></span><br><span class="line">               B    <span class="number">0.593616</span></span><br><span class="line">       two     A    <span class="number">0.884345</span></span><br><span class="line">               B    <span class="number">1.591431</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">98</span>]: stacked.unstack()</span><br><span class="line">Out[<span class="number">98</span>]: </span><br><span class="line">                     A         B</span><br><span class="line">first second                    </span><br><span class="line">bar   one    <span class="number">-0.727965</span> <span class="number">-0.589346</span></span><br><span class="line">      two     <span class="number">0.339969</span> <span class="number">-0.693205</span></span><br><span class="line">baz   one    <span class="number">-0.339355</span>  <span class="number">0.593616</span></span><br><span class="line">      two     <span class="number">0.884345</span>  <span class="number">1.591431</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">99</span>]: stacked.unstack(<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">99</span>]: </span><br><span class="line">second        one       two</span><br><span class="line">first                      </span><br><span class="line">bar   A <span class="number">-0.727965</span>  <span class="number">0.339969</span></span><br><span class="line">      B <span class="number">-0.589346</span> <span class="number">-0.693205</span></span><br><span class="line">baz   A <span class="number">-0.339355</span>  <span class="number">0.884345</span></span><br><span class="line">      B  <span class="number">0.593616</span>  <span class="number">1.591431</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">100</span>]: stacked.unstack(<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">100</span>]: </span><br><span class="line">first          bar       baz</span><br><span class="line">second                      </span><br><span class="line">one    A <span class="number">-0.727965</span> <span class="number">-0.339355</span></span><br><span class="line">       B <span class="number">-0.589346</span>  <span class="number">0.593616</span></span><br><span class="line">two    A  <span class="number">0.339969</span>  <span class="number">0.884345</span></span><br><span class="line">       B <span class="number">-0.693205</span>  <span class="number">1.591431</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pivot tables </span></span><br><span class="line">In [<span class="number">101</span>]: df = pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>: [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>] * <span class="number">3</span>,</span><br><span class="line">   .....:                    <span class="string">&#x27;B&#x27;</span>: [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>] * <span class="number">4</span>,</span><br><span class="line">   .....:                    <span class="string">&#x27;C&#x27;</span>: [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>] * <span class="number">2</span>,</span><br><span class="line">   .....:                    <span class="string">&#x27;D&#x27;</span>: np.random.randn(<span class="number">12</span>),</span><br><span class="line">   .....:                    <span class="string">&#x27;E&#x27;</span>: np.random.randn(<span class="number">12</span>)&#125;)</span><br><span class="line">   .....: </span><br><span class="line"></span><br><span class="line">In [<span class="number">102</span>]: df</span><br><span class="line">Out[<span class="number">102</span>]: </span><br><span class="line">        A  B    C         D         E</span><br><span class="line"><span class="number">0</span>     one  A  foo <span class="number">-1.202872</span>  <span class="number">0.047609</span></span><br><span class="line"><span class="number">1</span>     one  B  foo <span class="number">-1.814470</span> <span class="number">-0.136473</span></span><br><span class="line"><span class="number">2</span>     two  C  foo  <span class="number">1.018601</span> <span class="number">-0.561757</span></span><br><span class="line"><span class="number">3</span>   three  A  bar <span class="number">-0.595447</span> <span class="number">-1.623033</span></span><br><span class="line"><span class="number">4</span>     one  B  bar  <span class="number">1.395433</span>  <span class="number">0.029399</span></span><br><span class="line"><span class="number">5</span>     one  C  bar <span class="number">-0.392670</span> <span class="number">-0.542108</span></span><br><span class="line"><span class="number">6</span>     two  A  foo  <span class="number">0.007207</span>  <span class="number">0.282696</span></span><br><span class="line"><span class="number">7</span>   three  B  foo  <span class="number">1.928123</span> <span class="number">-0.087302</span></span><br><span class="line"><span class="number">8</span>     one  C  foo <span class="number">-0.055224</span> <span class="number">-1.575170</span></span><br><span class="line"><span class="number">9</span>     one  A  bar  <span class="number">2.395985</span>  <span class="number">1.771208</span></span><br><span class="line"><span class="number">10</span>    two  B  bar  <span class="number">1.552825</span>  <span class="number">0.816482</span></span><br><span class="line"><span class="number">11</span>  three  C  bar  <span class="number">0.166599</span>  <span class="number">1.100230</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">103</span>]: pd.pivot_table(df, values=<span class="string">&#x27;D&#x27;</span>, index=[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>], columns=[<span class="string">&#x27;C&#x27;</span>])</span><br><span class="line">Out[<span class="number">103</span>]: </span><br><span class="line">C             bar       foo</span><br><span class="line">A     B                    </span><br><span class="line">one   A  <span class="number">2.395985</span> <span class="number">-1.202872</span></span><br><span class="line">      B  <span class="number">1.395433</span> <span class="number">-1.814470</span></span><br><span class="line">      C <span class="number">-0.392670</span> <span class="number">-0.055224</span></span><br><span class="line">three A <span class="number">-0.595447</span>       NaN</span><br><span class="line">      B       NaN  <span class="number">1.928123</span></span><br><span class="line">      C  <span class="number">0.166599</span>       NaN</span><br><span class="line">two   A       NaN  <span class="number">0.007207</span></span><br><span class="line">      B  <span class="number">1.552825</span>       NaN</span><br><span class="line">      C       NaN  <span class="number">1.018601</span></span><br></pre></td></tr></table></figure><h3 id="time-series"><a href="#time-series" class="headerlink" title="time series"></a>time series</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="categoricals"><a href="#categoricals" class="headerlink" title="categoricals"></a>categoricals</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">123</span>]: df = pd.DataFrame(&#123;<span class="string">&quot;id&quot;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">   .....:                    <span class="string">&quot;raw_grade&quot;</span>: [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]&#125;)</span><br><span class="line">   .....: </span><br><span class="line"></span><br><span class="line">In [<span class="number">124</span>]: df[<span class="string">&quot;grade&quot;</span>] = df[<span class="string">&quot;raw_grade&quot;</span>].astype(<span class="string">&quot;category&quot;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">125</span>]: df[<span class="string">&quot;grade&quot;</span>]</span><br><span class="line">Out[<span class="number">125</span>]: </span><br><span class="line"><span class="number">0</span>    a</span><br><span class="line"><span class="number">1</span>    b</span><br><span class="line"><span class="number">2</span>    b</span><br><span class="line"><span class="number">3</span>    a</span><br><span class="line"><span class="number">4</span>    a</span><br><span class="line"><span class="number">5</span>    e</span><br><span class="line">Name: grade, dtype: category</span><br><span class="line">Categories (<span class="number">3</span>, object): [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">126</span>]: df[<span class="string">&quot;grade&quot;</span>].cat.categories = [<span class="string">&quot;very good&quot;</span>, <span class="string">&quot;good&quot;</span>, <span class="string">&quot;very bad&quot;</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">127</span>]: df[<span class="string">&quot;grade&quot;</span>] = df[<span class="string">&quot;grade&quot;</span>].cat.set_categories([<span class="string">&quot;very bad&quot;</span>, <span class="string">&quot;bad&quot;</span>, <span class="string">&quot;medium&quot;</span>,</span><br><span class="line">   .....:                                               <span class="string">&quot;good&quot;</span>, <span class="string">&quot;very good&quot;</span>])</span><br><span class="line">   .....: </span><br><span class="line"></span><br><span class="line">In [<span class="number">128</span>]: df[<span class="string">&quot;grade&quot;</span>]</span><br><span class="line">Out[<span class="number">128</span>]: </span><br><span class="line"><span class="number">0</span>    very good</span><br><span class="line"><span class="number">1</span>         good</span><br><span class="line"><span class="number">2</span>         good</span><br><span class="line"><span class="number">3</span>    very good</span><br><span class="line"><span class="number">4</span>    very good</span><br><span class="line"><span class="number">5</span>     very bad</span><br><span class="line">Name: grade, dtype: category</span><br><span class="line">Categories (<span class="number">5</span>, object): [<span class="string">&#x27;very bad&#x27;</span>, <span class="string">&#x27;bad&#x27;</span>, <span class="string">&#x27;medium&#x27;</span>, <span class="string">&#x27;good&#x27;</span>, <span class="string">&#x27;very good&#x27;</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">129</span>]: df.sort_values(by=<span class="string">&quot;grade&quot;</span>)</span><br><span class="line">Out[<span class="number">129</span>]: </span><br><span class="line">   id raw_grade      grade</span><br><span class="line"><span class="number">5</span>   <span class="number">6</span>         e   very bad</span><br><span class="line"><span class="number">1</span>   <span class="number">2</span>         b       good</span><br><span class="line"><span class="number">2</span>   <span class="number">3</span>         b       good</span><br><span class="line"><span class="number">0</span>   <span class="number">1</span>         a  very good</span><br><span class="line"><span class="number">3</span>   <span class="number">4</span>         a  very good</span><br><span class="line"><span class="number">4</span>   <span class="number">5</span>         a  very good</span><br><span class="line"></span><br><span class="line">In [<span class="number">130</span>]: df.groupby(<span class="string">&quot;grade&quot;</span>).size()</span><br><span class="line">Out[<span class="number">130</span>]: </span><br><span class="line">grade</span><br><span class="line">very bad     <span class="number">1</span></span><br><span class="line">bad          <span class="number">0</span></span><br><span class="line">medium       <span class="number">0</span></span><br><span class="line">good         <span class="number">2</span></span><br><span class="line">very good    <span class="number">3</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="plotting"><a href="#plotting" class="headerlink" title="plotting"></a>plotting</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">131</span>]: <span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">In [<span class="number">132</span>]: plt.close(<span class="string">&#x27;all&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">133</span>]: ts = pd.Series(np.random.randn(<span class="number">1000</span>),</span><br><span class="line">   .....:                index=pd.date_range(<span class="string">&#x27;1/1/2000&#x27;</span>, periods=<span class="number">1000</span>))</span><br><span class="line">   .....: </span><br><span class="line"></span><br><span class="line">In [<span class="number">134</span>]: ts = ts.cumsum()</span><br><span class="line"></span><br><span class="line">In [<span class="number">135</span>]: ts.plot()</span><br><span class="line"></span><br><span class="line">In [<span class="number">136</span>]: df = pd.DataFrame(np.random.randn(<span class="number">1000</span>, <span class="number">4</span>), index=ts.index,</span><br><span class="line">   .....:                   columns=[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>])</span><br><span class="line">   .....: </span><br><span class="line"></span><br><span class="line">In [<span class="number">137</span>]: df = df.cumsum()</span><br><span class="line"></span><br><span class="line">In [<span class="number">138</span>]: plt.figure()</span><br><span class="line">Out[<span class="number">138</span>]: &lt;Figure size <span class="number">640</span>x480 <span class="keyword">with</span> <span class="number">0</span> Axes&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">139</span>]: df.plot()</span><br><span class="line">Out[<span class="number">139</span>]: &lt;matplotlib.axes._subplots.AxesSubplot at <span class="number">0x7f60347c91f0</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">140</span>]: plt.legend(loc=<span class="string">&#x27;best&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="getting-data-in-out"><a href="#getting-data-in-out" class="headerlink" title="getting data in/out"></a>getting data in/out</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># writing to csv</span></span><br><span class="line">df.to_csv(<span class="string">&#x27;foo.csv&#x27;</span>)</span><br><span class="line"><span class="comment"># reading from csv</span></span><br><span class="line">pd.read_csv(<span class="string">&#x27;foo.csv&#x27;</span>)</span><br><span class="line"><span class="comment"># writing to HDF5</span></span><br><span class="line">df.to_hdf(<span class="string">&#x27;foo.h5&#x27;</span>, <span class="string">&#x27;df&#x27;</span>)</span><br><span class="line"><span class="comment"># reading from HDF5</span></span><br><span class="line">pd.read_hdf(<span class="string">&#x27;foo.h5&#x27;</span>, <span class="string">&#x27;df&#x27;</span>)</span><br><span class="line"><span class="comment"># writing to Excel</span></span><br><span class="line">df.to_excel(<span class="string">&#x27;foo.xlsx&#x27;</span>, sheet_name=<span class="string">&#x27;Sheet1&#x27;</span>)</span><br><span class="line"><span class="comment"># reading from Excel</span></span><br><span class="line">pd.read_excel(<span class="string">&#x27;foo.xlsx&#x27;</span>, <span class="string">&#x27;Sheet1&#x27;</span>, index_col=<span class="literal">None</span>, na_values=[<span class="string">&#x27;NA&#x27;</span>])</span><br></pre></td></tr></table></figure><h2 id="pandas-simplified"><a href="#pandas-simplified" class="headerlink" title="pandas simplified"></a>pandas simplified</h2><h3 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">t = pd.Series(np.arange(<span class="number">10</span>),index=list(string.ascii_uppercase[:<span class="number">10</span>]))</span><br><span class="line">type(t)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pandas.core.series.Series</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典</span></span><br><span class="line">a = &#123;string.ascii_uppercase[i]:i <span class="keyword">for</span> i <span class="keyword">in</span> range <span class="number">10</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="string">&#x27;A&#x27;</span>:<span class="number">0</span>,</span><br><span class="line"><span class="string">&#x27;B&#x27;</span>:<span class="number">1</span>,</span><br><span class="line">...</span><br><span class="line"><span class="string">&#x27;J&#x27;</span>:<span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line">pd.Series(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line">A <span class="number">0</span></span><br><span class="line">B <span class="number">1</span></span><br><span class="line">...</span><br><span class="line">J <span class="number">9</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">pd.Series(a,index=list(string.ascii_uppercase[<span class="number">5</span>:<span class="number">15</span>]))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line">F <span class="number">5.0</span></span><br><span class="line">...</span><br><span class="line">J <span class="number">9.0</span></span><br><span class="line">K NaN</span><br><span class="line">...</span><br><span class="line">O NaN</span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当index无法和字典a中的内容相对应，则显示是NAN</span></span><br><span class="line">NaN为float数据，自动扩展成float</span><br><span class="line"></span><br><span class="line"><span class="comment">## Series 切片索引 序号/index</span></span><br><span class="line">t[<span class="number">2</span>:<span class="number">10</span>:<span class="number">2</span>]</span><br><span class="line">t[<span class="number">1</span>]       <span class="comment"># 单个</span></span><br><span class="line">t[[<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>]] <span class="comment"># 多个</span></span><br><span class="line">t[t&gt;<span class="number">4</span>] </span><br><span class="line">t[<span class="string">&quot;F&quot;</span>]</span><br><span class="line">t[<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;g&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 键-&gt;值</span></span><br><span class="line">t.index</span><br><span class="line">t.values</span><br><span class="line">type(t.index)</span><br><span class="line">type(t.values)</span><br></pre></td></tr></table></figure><h3 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h3><p>DataFrame 行列索引</p><ul><li>行 index 0轴 axis = 0</li><li>列 columns 1轴 axis = 1</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>,<span class="number">4</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基础属性</span></span><br><span class="line">df.shape</span><br><span class="line">df.dtypes</span><br><span class="line">df.ndim</span><br><span class="line">df.index</span><br><span class="line">df.columns</span><br><span class="line">df.values</span><br><span class="line"></span><br><span class="line"><span class="comment"># 整体情况查询</span></span><br><span class="line">df.head(<span class="number">3</span>)</span><br><span class="line">df.tail(<span class="number">3</span>)</span><br><span class="line">df.info() <span class="comment"># 信息概览</span></span><br><span class="line">df.describe() <span class="comment"># 快速统计结果</span></span><br><span class="line"></span><br><span class="line">df_sorted = df.sort_values(by=<span class="string">&quot;Count_AnimalName&quot;</span>,ascending = <span class="literal">False</span>)</span><br><span class="line">df_sorted[<span class="number">1</span>:<span class="number">100</span>]</span><br><span class="line">df_sorted[<span class="number">1</span>:<span class="number">100</span>][<span class="string">&quot;Count_AnimalName&quot;</span>]</span><br><span class="line">df_sorted[<span class="string">&quot;Count_AnimalName&quot;</span>]  <span class="comment"># 查看某一列信息内容</span></span><br><span class="line"></span><br><span class="line">df.loc  <span class="comment"># 通过标签索引行数据</span></span><br><span class="line">df.iloc <span class="comment"># 通过位置获取行数据</span></span><br><span class="line"></span><br><span class="line">t</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">  W X Y  Z </span><br><span class="line">A <span class="number">0</span> <span class="number">1</span> <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">B <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>  <span class="number">7</span>  </span><br><span class="line">C <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> <span class="number">11</span></span><br><span class="line"></span><br><span class="line">t.loc[<span class="string">&quot;A&quot;</span>,<span class="string">&quot;W&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0</span></span><br><span class="line"></span><br><span class="line">t.loc[<span class="string">&quot;A&quot;</span>,[<span class="string">&quot;W&quot;</span>,<span class="string">&quot;Z&quot;</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line">W <span class="number">0</span></span><br><span class="line">Z <span class="number">3</span></span><br><span class="line"></span><br><span class="line">t.loc[<span class="string">&quot;A&quot;</span>:<span class="string">&quot;C&quot;</span>,[<span class="string">&quot;W&quot;</span>,<span class="string">&quot;Z&quot;</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line">  W Z</span><br><span class="line">A <span class="number">0</span> <span class="number">3</span></span><br><span class="line">B <span class="number">4</span> <span class="number">7</span></span><br><span class="line">C <span class="number">8</span> <span class="number">11</span></span><br><span class="line"><span class="comment"># 冒号在loc中闭合 / 不在iloc中闭合</span></span><br><span class="line"></span><br><span class="line">t.loc[<span class="number">1</span>:<span class="number">3</span>,<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">  Y Z</span><br><span class="line">B <span class="number">5</span> <span class="number">6</span></span><br><span class="line">C <span class="number">9</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋值 </span></span><br><span class="line">t.iloc[<span class="number">1</span>:<span class="number">2</span>,<span class="number">0</span>:<span class="number">2</span>] = <span class="number">200</span></span><br><span class="line">    W   X   Y   Z </span><br><span class="line">A   <span class="number">0</span>   <span class="number">1</span> <span class="number">100</span>   <span class="number">3</span></span><br><span class="line">B <span class="number">200</span> <span class="number">200</span>   <span class="number">6</span>   <span class="number">7</span></span><br><span class="line">C   <span class="number">8</span>   <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 布尔索引</span></span><br><span class="line">df[df[<span class="string">&quot;Count_AnimalName&quot;</span>]&gt;<span class="number">800</span>]</span><br><span class="line">df[(df[<span class="string">&quot;Row_Labels&quot;</span>].str.len()&gt;<span class="number">4</span>)&amp;(df[<span class="string">&quot;Count_AnimalName&quot;</span>]&gt;<span class="number">700</span>)]</span><br></pre></td></tr></table></figure><h3 id="Pandas-字符串方法"><a href="#Pandas-字符串方法" class="headerlink" title="Pandas 字符串方法"></a>Pandas 字符串方法</h3><p>df.str.方法()</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>contains</td><td>返回表示 个字符串是否含有指定模式的布尔型数组</td></tr><tr><td>len</td><td>计算各字符串的长度</td></tr><tr><td>lower/upper</td><td>大小写转换</td></tr><tr><td>replace</td><td>用指定字符串替换找到的</td></tr><tr><td>split</td><td>根据分隔符或正则表达式对字符串进行拆分</td></tr><tr><td>strip</td><td>去除空白符，包括换行符</td></tr><tr><td></td><td></td></tr><tr><td>cat</td><td></td></tr><tr><td>count</td><td></td></tr><tr><td>endswith/startswitch</td><td></td></tr><tr><td>findall</td><td></td></tr><tr><td>get</td><td>获取各元素的第i个字符</td></tr><tr><td>join</td><td>根据指定的分隔符将Series中各个元素的字符串联起来</td></tr><tr><td>match</td><td>re.match</td></tr><tr><td>pad</td><td>字符串左边右边添加空白符</td></tr><tr><td>center</td><td></td></tr><tr><td>repeat</td><td></td></tr><tr><td>slice</td><td></td></tr></tbody></table><h3 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断</span></span><br><span class="line">pd.isnull(df)</span><br><span class="line">pd.notnull(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理 </span></span><br><span class="line"><span class="comment"># 1.删除NaN所在 行列</span></span><br><span class="line">dropna(axis=<span class="number">0</span>,how=<span class="string">&#x27;any&#x27;</span>,inplace=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 2.填充数据</span></span><br><span class="line">t.fillna(t.mean())</span><br><span class="line">t.fillna(t.median()) </span><br><span class="line">t.fillna(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 3.处理0</span></span><br><span class="line">t[t==<span class="number">0</span>]=np.nan </span><br></pre></td></tr></table></figure><h3 id="统计方法"><a href="#统计方法" class="headerlink" title="统计方法"></a>统计方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&quot;Rating&quot;</span>].mean()</span><br><span class="line">df[<span class="string">&quot;Actors&quot;</span>].str.split(<span class="string">&quot;,&quot;</span>).tolist()</span><br><span class="line">nums = set([i <span class="keyword">for</span> j <span class="keyword">in</span> temp_list <span class="keyword">for</span> i <span class="keyword">in</span> j]) <span class="comment"># set 用来去重</span></span><br><span class="line">df[<span class="string">&quot;xxx&quot;</span>].max()</span><br><span class="line">df[<span class="string">&quot;xxx&quot;</span>].argmax()</span><br><span class="line">df[<span class="string">&quot;xxx&quot;</span>].min()</span><br><span class="line">df[<span class="string">&quot;xxx&quot;</span>].argmin()</span><br><span class="line">df[<span class="string">&quot;xxx&quot;</span>].median()</span><br></pre></td></tr></table></figure><h3 id="分组聚合"><a href="#分组聚合" class="headerlink" title="分组聚合"></a>分组聚合</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># join</span></span><br><span class="line"><span class="comment"># 行索引 相同的合并到一起 没有的部分NaN 填充</span></span><br><span class="line">t1.join(t2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># merge</span></span><br><span class="line"><span class="comment"># 按照列 把数据合并到一起</span></span><br><span class="line">t1.merge(t2,left_on=<span class="string">&quot;0&quot;</span>,right_on=<span class="string">&quot;X&quot;</span>,how = <span class="string">&quot;inner&quot;</span>) <span class="comment"># </span></span><br><span class="line">t1.merge(t2,left_on=<span class="string">&quot;0&quot;</span>,right_on=<span class="string">&quot;X&quot;</span>,how = <span class="string">&quot;outer&quot;</span>) <span class="comment"># 补全</span></span><br><span class="line">t1.merge(t2,left_on=<span class="string">&quot;0&quot;</span>,right_on=<span class="string">&quot;X&quot;</span>,how = <span class="string">&quot;left&quot;</span>)  <span class="comment"># 左边为基准</span></span><br><span class="line">t1.merge(t2,left_on=<span class="string">&quot;0&quot;</span>,right_on=<span class="string">&quot;X&quot;</span>,how = <span class="string">&quot;right&quot;</span>) <span class="comment"># 右边为基准</span></span><br><span class="line"></span><br><span class="line">Grouped = df.groupby(by=<span class="string">&quot;columns_name&quot;</span>)</span><br><span class="line">Grouped = df.groupby(by=[df[<span class="string">&quot;Country&quot;</span>],df[<span class="string">&quot;State&quot;</span>]])</span><br><span class="line">Grouped.count()</span><br><span class="line">Grouped.sum() </span><br><span class="line">Grouped.mean() </span><br><span class="line">Grouped.median() </span><br><span class="line">Grouped.std() / Grouped.var()</span><br><span class="line">Grouped.min() </span><br></pre></td></tr></table></figure><h3 id="索引-复合索引"><a href="#索引-复合索引" class="headerlink" title="索引 复合索引"></a>索引 复合索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">df.index</span><br><span class="line">df.index=[<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>]</span><br><span class="line">df.reindex(list(<span class="string">&quot;abcdef&quot;</span>)) <span class="comment"># 重新设定</span></span><br><span class="line">df.set_index(<span class="string">&quot;Country&quot;</span>,drop=<span class="literal">False</span>) <span class="comment"># 指定一列作为index</span></span><br><span class="line">df.set_index(<span class="string">&quot;Country&quot;</span>).index.unique() <span class="comment"># 返回index的唯一值</span></span><br><span class="line"></span><br><span class="line">X.swaplevel()[<span class="string">&#x27;h&#x27;</span>] <span class="comment"># 交换index里外层(多层index) 便于索引</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="时间序列"><a href="#时间序列" class="headerlink" title="时间序列"></a>时间序列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成 start and end  范围 freq频率的一组时间索引</span></span><br><span class="line"><span class="comment"># 生成 start and periods个 freq频率的一组时间索引</span></span><br><span class="line">pd.date_range(start = <span class="literal">None</span>, end = <span class="literal">None</span>, periods = <span class="literal">None</span>, freq = <span class="string">&#x27;D&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pd.date_range(start=<span class="string">&quot;20170101&quot;</span>,end=<span class="string">&quot;20170924&quot;</span>)</span><br><span class="line">pd.date_range(start=<span class="string">&quot;20170101&quot;</span>,end=<span class="string">&quot;20170924&quot;</span>,freq = <span class="string">&quot;BM&quot;</span>)</span><br><span class="line">pd.date_range(start=<span class="string">&quot;20170101&quot;</span>,periods = <span class="number">10</span>, freq = <span class="string">&quot;WOM-3FRI&quot;</span>)</span><br><span class="line"></span><br><span class="line">index = pd.date_range(start=<span class="string">&quot;20170101&quot;</span>,periods=<span class="number">10</span>)</span><br><span class="line">df = pd.DataFrame(np.random.rand(<span class="number">10</span>),index = index)</span><br><span class="line">df[<span class="string">&quot;timeStamp&quot;</span>] = pd.to_datatime(df[<span class="string">&quot;timeStamp&quot;</span>],format=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重采样 resample</span></span><br><span class="line">t = pd.DataFrame(np.random,uniform(<span class="number">10</span>,<span class="number">50</span>,(<span class="number">100</span>,<span class="number">1</span>)),index = pd.date_range(<span class="string">&quot;20170101&quot;</span>,periods=<span class="number">100</span>))</span><br><span class="line">t.resample(<span class="string">&quot;M&quot;</span>).mean()</span><br><span class="line">t.resample(<span class="string">&quot;10D&quot;</span>).count()</span><br><span class="line">t.resample(<span class="string">&quot;QS-JAN&quot;</span>).count()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间段 PeriodIndex</span></span><br><span class="line">periods = pd.PeriodIndex(year = data[<span class="string">&quot;year&quot;</span>],month = data[<span class="string">&quot;month&quot;</span>],day = data[<span class="string">&quot;day&quot;</span>],hour = data[<span class="string">&quot;hour&quot;</span>],freq = <span class="string">&quot;H&quot;</span>)</span><br><span class="line">data = df.set_index(periods).resample(<span class="string">&quot;10D&quot;</span>).mean()</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>freq别名</th><th>类型</th></tr></thead><tbody><tr><td>D</td><td>Day</td></tr><tr><td>B</td><td>BusinessDay</td></tr><tr><td>H</td><td>hour</td></tr><tr><td>T/min</td><td>minute</td></tr><tr><td>S</td><td>second</td></tr><tr><td>L/ms</td><td>milisecond</td></tr><tr><td>U</td><td>micro second</td></tr><tr><td>M</td><td>moonth end</td></tr><tr><td>BM</td><td>business month end</td></tr><tr><td>MS</td><td>month start</td></tr><tr><td>BMS</td><td>business month begin</td></tr></tbody></table><h3 id="数据读取"><a href="#数据读取" class="headerlink" title="数据读取"></a>数据读取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.read_csv()</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> panda <span class="keyword">as</span> pd</span><br><span class="line">df = pd.DataFrame(mat) <span class="comment"># dataframe</span></span><br><span class="line">pd.DataFrame(mat).as_matrix()</span><br><span class="line"></span><br><span class="line">df.head(<span class="number">2</span>)</span><br><span class="line">df.tail(<span class="number">2</span>)</span><br><span class="line">df.shape(<span class="number">2</span>)</span><br><span class="line">df.describe()</span><br><span class="line">df.columns = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;crazy&#x27;</span>] <span class="comment"># set column name</span></span><br><span class="line">df.index = [<span class="string">&#x27;n1&#x27;</span>,<span class="string">&#x27;n2&#x27;</span>,<span class="string">&#x27;n3&#x27;</span>] <span class="comment"># set index name</span></span><br></pre></td></tr></table></figure><h1 id="week-8-多维列表-字典-Tuples元祖"><a href="#week-8-多维列表-字典-Tuples元祖" class="headerlink" title="week 8 多维列表 字典 Tuples元祖"></a>week 8 多维列表 字典 Tuples元祖</h1><h2 id="multidimensional-lists-Matrix"><a href="#multidimensional-lists-Matrix" class="headerlink" title="multidimensional lists - Matrix"></a>multidimensional lists - Matrix</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 矩阵创建</span></span><br><span class="line">A = [[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>],[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>],[<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>],[<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>],[<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元素选取</span></span><br><span class="line">print(A[<span class="number">0</span>][<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">my_class = [ [<span class="string">&#x27;Sara&#x27;</span>,<span class="number">5.5</span>,<span class="number">4.5</span>,<span class="number">6</span>], [<span class="string">&#x27;Lara&#x27;</span>,<span class="number">4</span>,<span class="number">3.5</span>,<span class="number">4.5</span>], [<span class="string">&#x27;Thomas&#x27;</span>,<span class="number">4.5</span>,<span class="number">4</span>,<span class="number">6</span>], [<span class="string">&#x27;Andy&#x27;</span>,<span class="number">3</span>,<span class="number">5.5</span>,<span class="number">4</span>], [<span class="string">&#x27;Kate&#x27;</span>,<span class="number">4</span>,<span class="number">4.5</span>,<span class="number">5</span>] ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切片</span></span><br><span class="line">my_class[<span class="number">2</span>][<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 行列 循环引用</span></span><br><span class="line"><span class="keyword">for</span> student <span class="keyword">in</span> my_class:</span><br><span class="line">       avg_note = <span class="number">0</span></span><br><span class="line">       <span class="keyword">for</span> grade <span class="keyword">in</span> range(<span class="number">1</span>, len(student)):</span><br><span class="line">             avg_note = avg_note + student[grade]</span><br><span class="line">       avg_note = avg_note/(len(student)<span class="number">-1</span>)</span><br><span class="line">       print(<span class="string">&quot;The average note of&quot;</span>,student[<span class="number">0</span>], <span class="string">&quot;is:&quot;</span>,avg_note)</span><br></pre></td></tr></table></figure><h2 id="Dictionaries"><a href="#Dictionaries" class="headerlink" title="Dictionaries"></a>Dictionaries</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 dict</span></span><br><span class="line">age_dict = &#123;<span class="string">&quot;John&quot;</span>:<span class="number">20</span>, <span class="string">&quot;Sara&quot;</span>:<span class="number">18</span>, <span class="string">&quot;Nick&quot;</span>:<span class="number">32</span>,<span class="string">&quot;Nina&quot;</span>:<span class="number">40</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引用 dict</span></span><br><span class="line">age_dict[<span class="string">&quot;Sara&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加key</span></span><br><span class="line">age_dict = &#123;<span class="string">&quot;John&quot;</span>:<span class="number">20</span>, <span class="string">&quot;Sara&quot;</span>:<span class="number">18</span>, <span class="string">&quot;Nick&quot;</span>:<span class="number">32</span>,<span class="string">&quot;Nina&quot;</span>:<span class="number">40</span>&#125;</span><br><span class="line">age_dict[<span class="string">&quot;Jasmin&quot;</span>] = <span class="number">49</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除key</span></span><br><span class="line">age_dict = &#123;<span class="string">&quot;John&quot;</span>:<span class="number">20</span>, <span class="string">&quot;Sara&quot;</span>:<span class="number">18</span>, <span class="string">&quot;Nick&quot;</span>:<span class="number">32</span>,<span class="string">&quot;Nina&quot;</span>:<span class="number">40</span>&#125;</span><br><span class="line"><span class="keyword">del</span> age_dict[<span class="string">&quot;Sara&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改变值</span></span><br><span class="line">age_dict = &#123;<span class="string">&quot;John&quot;</span>:<span class="number">20</span>, <span class="string">&quot;Sara&quot;</span>:<span class="number">18</span>, <span class="string">&quot;Nick&quot;</span>:<span class="number">32</span>,<span class="string">&quot;Nina&quot;</span>:<span class="number">40</span>&#125;</span><br><span class="line">age_dict[<span class="string">&quot;Nick&quot;</span>] = <span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当keys 为strings， dict的创建方式</span></span><br><span class="line">age_dict = dict(John=<span class="number">20</span>, Sara=<span class="number">18</span>, Nick=<span class="number">32</span>,Nina=<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 嵌套式的dict</span></span><br><span class="line">dict1 = dict(firstname=<span class="string">&quot;Ben&quot;</span>, lastname = <span class="string">&quot;black&quot;</span>, age=<span class="number">32</span>)</span><br><span class="line">dict2 = dict(height = <span class="number">1.85</span>, weight = <span class="number">85</span>, footsize = <span class="number">43</span>)</span><br><span class="line">dict3 = dict(job = <span class="string">&quot;teacher&quot;</span>, field = <span class="string">&quot;chemistry&quot;</span>)</span><br><span class="line">dict_data = dict(basic_info = dict1, size = dict2, profession =dict3)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Dictionary-methods"><a href="#Dictionary-methods" class="headerlink" title="Dictionary methods"></a>Dictionary methods</h2><p>.keys()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回所有key （无序</span></span><br><span class="line">age_dict = &#123;<span class="string">&quot;John&quot;</span>:<span class="number">20</span>, <span class="string">&quot;Sara&quot;</span>:<span class="number">18</span>, <span class="string">&quot;Nick&quot;</span>:<span class="number">32</span>,<span class="string">&quot;Nina&quot;</span>:<span class="number">40</span>&#125;</span><br><span class="line">keys_view = age_dict.keys()</span><br><span class="line">keys_list = list(keys_view)</span><br><span class="line">print(keys_list)</span><br></pre></td></tr></table></figure><p>.values()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回所有values （无序</span></span><br><span class="line">info_dict = &#123;<span class="string">&quot;Name&quot;</span>:<span class="string">&quot;Sara&quot;</span>, <span class="string">&quot;Age&quot;</span>:<span class="number">28</span>, <span class="string">&quot;Gender&quot;</span>:<span class="string">&quot;Female&quot;</span>,<span class="string">&quot;Job&quot;</span>:<span class="string">&quot;software developer&quot;</span>&#125;</span><br><span class="line">values_view = info_dict.values()</span><br><span class="line">values_list = list(values_view)</span><br><span class="line">print(values_list)</span><br></pre></td></tr></table></figure><p>.items()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回所有items （无序</span></span><br><span class="line">info_dict = &#123;<span class="string">&quot;Name&quot;</span>:<span class="string">&quot;Sara&quot;</span>, <span class="string">&quot;Age&quot;</span>:<span class="number">28</span>, <span class="string">&quot;Gender&quot;</span>:<span class="string">&quot;Female&quot;</span>,<span class="string">&quot;Job&quot;</span>:<span class="string">&quot;software developer&quot;</span>&#125;</span><br><span class="line">items_view = info_dict.items()</span><br><span class="line">items_list = list(items_view)</span><br><span class="line">print(items_list)</span><br></pre></td></tr></table></figure><p>.clear()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age_dict = &#123;<span class="string">&quot;John&quot;</span>:<span class="number">20</span>, <span class="string">&quot;Sara&quot;</span>:<span class="number">18</span>, <span class="string">&quot;Nick&quot;</span>:<span class="number">32</span>,<span class="string">&quot;Nina&quot;</span>:<span class="number">40</span>&#125;</span><br><span class="line">age_dict.clear()</span><br><span class="line">print(age_dict)</span><br></pre></td></tr></table></figure><p>.get()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age_dict = &#123;<span class="string">&quot;John&quot;</span>:<span class="number">20</span>, <span class="string">&quot;Sara&quot;</span>:<span class="number">18</span>, <span class="string">&quot;Nick&quot;</span>:<span class="number">32</span>,<span class="string">&quot;Nina&quot;</span>:<span class="number">40</span>&#125;</span><br><span class="line">print(age_dict.get(<span class="string">&quot;Nick&quot;</span>))</span><br><span class="line">print(age_dict.get(<span class="string">&quot;Carsten&quot;</span>))</span><br><span class="line"><span class="comment"># 当没有结果的时候，返回none 而不是像 age_dict[&quot;not existing key&quot;] 报错</span></span><br></pre></td></tr></table></figure><p>.pop()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Remove the given key from  my_dict, returning the associated value. If the key does not exist, return the optional value provided in the pop call.</span></span><br><span class="line"></span><br><span class="line">age_dict = &#123;<span class="string">&quot;John&quot;</span>:<span class="number">20</span>, <span class="string">&quot;Sara&quot;</span>:<span class="number">18</span>, <span class="string">&quot;Nick&quot;</span>:<span class="number">32</span>,<span class="string">&quot;Nina&quot;</span>:<span class="number">40</span>&#125;</span><br><span class="line">age_dict.pop(<span class="string">&quot;John&quot;</span>)</span><br><span class="line">print(age_dict)</span><br><span class="line"></span><br><span class="line">age_dict.pop(<span class="string">&quot;Hanna&quot;</span>)</span><br><span class="line"></span><br><span class="line">age_dict.pop(<span class="string">&quot;Hanna&quot;</span>,<span class="string">&quot;unknown&quot;</span>)</span><br><span class="line"></span><br><span class="line">age_dict.pop(<span class="string">&quot;Hanna&quot;</span>,<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>.update()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">age_dict = &#123;<span class="string">&quot;John&quot;</span>:<span class="number">20</span>, <span class="string">&quot;Sara&quot;</span>:<span class="number">18</span>, <span class="string">&quot;Nick&quot;</span>:<span class="number">32</span>,<span class="string">&quot;Nina&quot;</span>:<span class="number">40</span>&#125;</span><br><span class="line">new_dict = &#123;<span class="string">&quot;Carsten&quot;</span>:<span class="number">50</span>, <span class="string">&quot;Emi&quot;</span>:<span class="number">22</span>&#125;</span><br><span class="line">age_dict.update(new_dict)</span><br><span class="line">print(age_dict)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当有重复的key， 用新的值取代旧的值</span></span><br><span class="line">age_dict = &#123;<span class="string">&quot;John&quot;</span>:<span class="number">20</span>, <span class="string">&quot;Sara&quot;</span>:<span class="number">18</span>, <span class="string">&quot;Nick&quot;</span>:<span class="number">32</span>,<span class="string">&quot;Nina&quot;</span>:<span class="number">40</span>&#125;</span><br><span class="line">new_dict = &#123;<span class="string">&quot;John&quot;</span>:<span class="number">50</span>, <span class="string">&quot;Emi&quot;</span>:<span class="number">22</span>&#125;</span><br><span class="line">age_dict.update(new_dict)</span><br><span class="line">print(age_dict)</span><br></pre></td></tr></table></figure><h2 id="Tuples-immutable-list"><a href="#Tuples-immutable-list" class="headerlink" title="Tuples - immutable list"></a>Tuples - immutable list</h2><p>similar as list only with a () for the difference</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建tuple</span></span><br><span class="line">my_tuple = (<span class="number">1</span>, <span class="number">3.5</span>, <span class="string">&#x27;Tuple&#x27;</span>, <span class="string">&#x27;List&#x27;</span>)</span><br><span class="line">my_tuple_1 = <span class="number">1</span>, <span class="number">3.5</span>, <span class="string">&#x27;Tuple&#x27;</span>, <span class="string">&#x27;List&#x27;</span></span><br><span class="line"></span><br><span class="line">type(my_tuple_1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建单个元素的tuple，需要“，”</span></span><br><span class="line">my_tuple_3 = (<span class="number">1</span>,)</span><br><span class="line">my_tuple_4 = <span class="string">&#x27;List&#x27;</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建空的元祖</span></span><br><span class="line">my_tuple_5 = ()</span><br><span class="line">print(len(my_tuple_5))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取元素</span></span><br><span class="line">my_tuple = (<span class="number">1</span>, <span class="number">3.5</span>, <span class="string">&#x27;Tuple&#x27;</span>, <span class="string">&#x27;List&#x27;</span>)</span><br><span class="line">print(my_tuple[<span class="number">1</span>])</span><br><span class="line">print(my_tuple[<span class="number">-1</span>])</span><br><span class="line">print(my_tuple[<span class="number">1</span>:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元祖不能append/extend 不能remove/pop</span></span><br><span class="line">my_tuple = (<span class="number">1</span>, <span class="number">3.5</span>, <span class="string">&#x27;Tuple&#x27;</span>, <span class="string">&#x27;List&#x27;</span>)</span><br><span class="line">my_tuple.append(<span class="number">4</span>)</span><br><span class="line">my_tuple.remove(<span class="string">&#x27;Tuple&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;List&#x27;</span> <span class="keyword">in</span> my_tuple</span><br><span class="line"></span><br><span class="line"><span class="comment"># list tuple 互相转换</span></span><br><span class="line">my_tuple = (<span class="number">1</span>, <span class="number">3.5</span>, <span class="string">&#x27;Tuple&#x27;</span>, <span class="string">&#x27;List&#x27;</span>)</span><br><span class="line">my_list = list(my_tuple)</span><br><span class="line">print(my_tuple)</span><br><span class="line">print(my_list)</span><br><span class="line"></span><br><span class="line">my_list = [<span class="number">1</span>, <span class="number">3.5</span>, <span class="string">&#x27;Tuple&#x27;</span>, <span class="string">&#x27;List&#x27;</span>]</span><br><span class="line">my_tuple = tuple(my_list)</span><br><span class="line">print(my_list)</span><br><span class="line">print(my_tuple)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tuple 作用</span></span><br><span class="line"><span class="comment"># 用作 dict keys</span></span><br><span class="line"><span class="comment"># return function 的 多个 values</span></span><br></pre></td></tr></table></figure><h1 id="week-9-文件-formatting-recursion-error"><a href="#week-9-文件-formatting-recursion-error" class="headerlink" title="week 9 文件 formatting recursion error"></a>week 9 文件 formatting recursion error</h1><h2 id="File-input-output"><a href="#File-input-output" class="headerlink" title="File input/output"></a>File input/output</h2><h3 id="open-打开文件"><a href="#open-打开文件" class="headerlink" title="open() 打开文件"></a>open() 打开文件</h3><p>file_object = open(filename[, mode ])</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_file = open(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="comment"># mode &quot;r&quot;默认</span></span><br><span class="line"><span class="comment"># “r” &quot;w&quot; &quot;a&quot; &#x27;r+&#x27;</span></span><br><span class="line"><span class="comment"># read / write / append 插入到最后 / both read and write</span></span><br></pre></td></tr></table></figure><h3 id="read"><a href="#read" class="headerlink" title="read()"></a>read()</h3><p>The result of read() function is a <strong>string</strong> containing the file data<br>my_string = my_file.read()</p><h3 id="close"><a href="#close" class="headerlink" title="close()"></a>close()</h3><p>close the file at the end<br>my_file.close()</p><h3 id="readline"><a href="#readline" class="headerlink" title="readline()"></a>readline()</h3><p>读取单行 以\n 结尾 最后一行无\n 光标移到该行结尾<br>line_string = my_file.readline()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># read whole file line by line</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">    print(line, end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="readlines"><a href="#readlines" class="headerlink" title="readlines()"></a>readlines()</h3><p>读取所有行 - 返回list 单行数据 保存成一个element<br>line_list = my_file.readlines()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># open the file read only</span></span><br><span class="line">my_file = open(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># read the whole file</span></span><br><span class="line">my_string = my_file.read()</span><br><span class="line">print(my_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># read the first line</span></span><br><span class="line">first_line_string = my_file.readline()</span><br><span class="line">print(first_line_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># read the next line</span></span><br><span class="line">second_line_string = my_file.readline()</span><br><span class="line">print(second_line_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># read the whole file line by line</span></span><br><span class="line">line_list = my_file.readlines()</span><br><span class="line">print(line_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># close the file</span></span><br><span class="line"></span><br><span class="line">my_file.close()</span><br></pre></td></tr></table></figure><h3 id="write"><a href="#write" class="headerlink" title="write()"></a>write()</h3><ol><li>打开文档 （文档存在会被覆盖）</li><li>写入string （非string数据需要转化成为string后写入）<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># open the file write only</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1st example: File doesn’t exist</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_file = open(<span class="string">&#x27;test_2.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write a string into a file</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_string = <span class="string">&#x27;This a test string&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_file.write(my_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write a non-string into a file</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>value = <span class="number">120</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>value_string = str(value)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_file.write(value_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># close the file</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_file.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># open the file write only</span></span><br><span class="line"><span class="comment"># 2nd example: File exists</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_file = open(<span class="string">&#x27;test_2.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write a string into a file</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_string = <span class="string">&#x27;*************&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_file.write(my_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># close the file</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_file.close()</span><br></pre></td></tr></table></figure></li></ol><h3 id="read-from-a-particular-position-in-a-file"><a href="#read-from-a-particular-position-in-a-file" class="headerlink" title="read from a particular position in a file"></a>read from a particular position in a file</h3><ol><li>file.tell()<br>返回 当前位置 （bytes from the beginning of the file）<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_file = open(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">pointer = my_file.tell()</span><br><span class="line">print(pointer)</span><br><span class="line">my_file.close()</span><br></pre></td></tr></table></figure></li><li>file.seek(offset[, from_what])<br>adding a offset to a reference point (0 beginning of the file/1 current position/2 end of the file)</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1st Example:</span></span><br><span class="line"><span class="comment"># 读完数据后 光标位于文档最后</span></span><br><span class="line">my_file = open(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">my_string = my_file.read()</span><br><span class="line">print(my_string)</span><br><span class="line"><span class="comment"># Remember the pointer is now at the end of the file</span></span><br><span class="line">my_file.read() <span class="comment"># gives empty string</span></span><br><span class="line">my_file.seek(<span class="number">0</span>) <span class="comment"># To move the pointer to the beginning again</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2nd Example</span></span><br><span class="line">my_file.seek(<span class="number">4</span>)</span><br><span class="line">my_string = my_file.read()</span><br><span class="line">print(my_string)</span><br><span class="line">print(my_file.tell())</span><br><span class="line">my_file.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3rd  Example:</span></span><br><span class="line">my_file = open(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r+&#x27;</span>) <span class="comment">#read and write mode</span></span><br><span class="line">my_file.seek(<span class="number">4</span>)</span><br><span class="line">my_string_1 = <span class="string">&#x27;XXXX&#x27;</span></span><br><span class="line">my_file.write(my_string_1) <span class="comment">#overwrite the characters starting from position 4 by my_string_1</span></span><br><span class="line">my_file.close()</span><br></pre></td></tr></table></figure><p>实例：查找文档中的is</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Read the whole file (output: a large string) and find the word in the string.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Read the file by its lines, meaning as a list of strings. Still we have the whole file in the memory.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># To loop over the lines and find the word:</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">my_file = open(<span class="string">&#x27;test_2.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># option 1:</span></span><br><span class="line">my_string = my_file.read()</span><br><span class="line">print(my_string)</span><br><span class="line">my_list = my_string.split()</span><br><span class="line"><span class="keyword">for</span> index_1 <span class="keyword">in</span> range(len(my_list)):</span><br><span class="line">    <span class="keyword">if</span> my_list[index_1] == <span class="string">&#x27;is&#x27;</span>:</span><br><span class="line">        print(index_1, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># option 2:</span></span><br><span class="line"></span><br><span class="line">my_file.seek(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">my_list = my_file.readlines()</span><br><span class="line">print(my_list)</span><br><span class="line"><span class="keyword">for</span> index_1 <span class="keyword">in</span> range(len(my_list)):</span><br><span class="line">    <span class="keyword">if</span> my_list[index_1].find(<span class="string">&#x27;is&#x27;</span>)!= <span class="number">-1</span>:</span><br><span class="line">        print(<span class="string">&#x27;line&#x27;</span>, index_1+<span class="number">1</span>,<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">        list_2 = my_list[index_1].split()</span><br><span class="line">        <span class="keyword">for</span> index_2 <span class="keyword">in</span> range(len(list_2)):</span><br><span class="line">            <span class="keyword">if</span> list_2[index_2] == <span class="string">&#x27;is&#x27;</span>:</span><br><span class="line">                print(index_2, end=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Move the pointer to the beginning</span></span><br><span class="line"></span><br><span class="line">my_file.seek(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># option 3:</span></span><br><span class="line"></span><br><span class="line">index_1 = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> my_file:</span><br><span class="line">    print(<span class="string">&#x27;\nline&#x27;</span>, index_1,<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    print(line.find(<span class="string">&#x27;is&#x27;</span>))</span><br><span class="line">    index += <span class="number">1</span> </span><br></pre></td></tr></table></figure><h3 id="file-access-mode-table"><a href="#file-access-mode-table" class="headerlink" title="file access mode table"></a>file access mode table</h3><table><thead><tr><th>Modes</th><th>Description</th></tr></thead><tbody><tr><td>r</td><td>Opens a file for reading only. The file pointer is placed at the beginning of the file. This is the default mode.</td></tr><tr><td>r+</td><td>Opens a file for both reading and writing. The file pointer placed at the beginning of the file.</td></tr><tr><td>w</td><td>Opens a file for writing only. Overwrites the file if the file exists. If the file does not exist, creates a new file for writing.</td></tr><tr><td>w+</td><td>Opens a file for both writing and reading. Overwrites the existing file if the file exists. If the file does not exist, creates a new file for reading and writing.</td></tr><tr><td>a</td><td>Opens a file for appending. The file pointer is at the end of the file if the file exists. That is, the file is in the append mode. If the file does not exist, it creates a new file for writing.</td></tr><tr><td>a+</td><td>Opens a file for both appending and reading. The file pointer is at the end of the file if the file exists. The file opens in the append mode. If the file does not exist, it creates a new file for reading and writing.</td></tr><tr><td>wb</td><td>Opens a file for writing only in binary format. Overwrites the file if the file exists. If the file does not exist, creates a new file for writing.</td></tr><tr><td>wb+</td><td>Opens a file for both writing and reading in binary format. Overwrites the existing file if the file exists. If the file does not exist, creates a new file for reading and writing.</td></tr><tr><td>rb</td><td>Opens a file for reading only in binary format. The file pointer is placed at the beginning of the file. This is the default mode.</td></tr><tr><td>rb+</td><td>Opens a file for both reading and writing in binary format. The file pointer placed at the beginning of the file.</td></tr><tr><td>ab</td><td>Opens a file for appending in binary format. The file pointer is at the end of the file if the file exists. That is, the file is in the append mode. If the file does not exist, it creates a new file for writing.</td></tr><tr><td>ab+</td><td>Opens a file for both appending and reading in binary format. The file pointer is at the end of the file if the file exists. The file opens in the append mode. If the file does not exist, it creates a new file for reading and writing.</td></tr></tbody></table><p>Example 1 读写错误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_file = open(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">my_string = <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">my_file.write(my_string) <span class="comment"># You get an error message, while the file is in read only mode</span></span><br><span class="line">my_file.close()</span><br></pre></td></tr></table></figure><p>Example 2 移动文档内光标 myfile.seek(0)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">my_file = open(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">my_file.write(<span class="string">&quot;This is a test file&quot;</span>)</span><br><span class="line">my_file.close()</span><br><span class="line"></span><br><span class="line">my_file = open(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r+&#x27;</span>)</span><br><span class="line">my_string = <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">my_file.write(my_string)</span><br><span class="line">my_file.seek(<span class="number">0</span>) <span class="comment"># Go to the beginning of the file</span></span><br><span class="line">print(my_file.read())</span><br><span class="line"></span><br><span class="line">my_file.seek(<span class="number">0</span>)</span><br><span class="line">my_file.write(<span class="string">&quot;**&quot;</span>)</span><br><span class="line">my_file.seek(<span class="number">0</span>) </span><br><span class="line">print(my_file.read())</span><br><span class="line"></span><br><span class="line">my_file.close()</span><br></pre></td></tr></table></figure><p>Example 3 append 模式可写 不可以读</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">my_file = open(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">first_line_string = my_file.readline()</span><br><span class="line"><span class="comment">#Error message, in append mode, the file is not readable</span></span><br><span class="line">my_file.write(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line"><span class="comment">#This string will be added to the end of the file</span></span><br><span class="line">my_file.close()</span><br></pre></td></tr></table></figure><h2 id="string-Formatting"><a href="#string-Formatting" class="headerlink" title="string Formatting"></a>string Formatting</h2><p>my_string.format(arguments)</p><ol><li><p>当有两个argument，只有一个{}，第二个argement会被忽略<br>当有两个{}但只有一个argument，Error</p></li><li><p>Positional arguments<br>We also can indicate in the curly bracket, which arguments should be taken, using a </p></li><li><p>width precision and type <code>&#123;Position:Width.PrecisionType&#125;</code><br>Width: specifies the minimum length dedicated to the number (小数点和浮点数算入width)<br>Precision: decimal point precision, meaning how many digits we see in the decimal part<br>Type: specify the type of the argument:<br>d: integer<br>f: float<br>s: string</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_name = <span class="string">&#x27;Sara&#x27;</span></span><br><span class="line">my_age = <span class="number">20</span></span><br><span class="line">my_string = <span class="string">&quot;Name = &#123;1&#125; and Age = &#123;0&#125; &quot;</span>.format(my_name, my_age)</span><br><span class="line">print(my_string)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">first_name = <span class="string">&#x27;Sara&#x27;</span></span><br><span class="line">date_of_birth = [<span class="number">11</span>,<span class="number">2</span>,<span class="number">1990</span>]</span><br><span class="line">family_name = <span class="string">&#x27;Black&#x27;</span></span><br><span class="line">my_string = <span class="string">&quot;First name = &#123;0&#125;, Last name = &#123;2&#125; and Date of Birth = &#123;1&#125; &quot;</span>.format(first_name, date_of_birth, family_name)</span><br><span class="line">print(my_string)</span><br><span class="line"></span><br><span class="line">my_string = <span class="string">&quot;x =&#123;0:4d&#125; and y =&#123;1:7.2f&#125;&quot;</span>.format(<span class="number">12</span>, <span class="number">8.56</span>)</span><br><span class="line">print(my_string)</span><br><span class="line"></span><br><span class="line">my_string = <span class="string">&quot;x =&#123;0:3d&#125; and y =&#123;1:7.4f&#125; and z =&#123;2:7.2f&#125;&quot;</span>.format(<span class="number">123456</span>, <span class="number">8.56</span>, <span class="number">23.5555</span>)</span><br><span class="line">print(my_string)</span><br><span class="line">my_string = <span class="string">&quot;&#123;0:10s&#125;:&#123;1:4d&#125;\n&#123;2:10s&#125;:&#123;3:4d&#125; &quot;</span>.format(<span class="string">&#x27;Sara&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;John&#x27;</span>, <span class="number">9</span>)</span><br><span class="line">print(my_string)</span><br></pre></td></tr></table></figure><h2 id="Recursion-function"><a href="#Recursion-function" class="headerlink" title="Recursion function"></a>Recursion function</h2><p>会对自己的一次或者多次调用的函数 - recursive function</p><ul><li>要有一个base case</li><li>必须move toward the base case</li><li>must call itself</li></ul><p>example 1 n! factorial of n</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># main Program</span></span><br><span class="line">factorial_n = factorial(<span class="number">5</span>)</span><br><span class="line">print(factorial_n)</span><br></pre></td></tr></table></figure><p>example 2 - track the process of the function</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span>(<span class="params">n</span>):</span></span><br><span class="line">    print(<span class="string">&quot;factorial has been called with n = &quot;</span> + str(n))</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result = n * factorial(n<span class="number">-1</span>)</span><br><span class="line">        print(<span class="string">&quot;intermediate result for &quot;</span>, n, <span class="string">&quot; * factorial(&quot;</span> ,n<span class="number">-1</span>, <span class="string">&quot;): &quot;</span>,result)</span><br><span class="line">        <span class="keyword">return</span> result  </span><br><span class="line"></span><br><span class="line"><span class="comment"># main Program</span></span><br><span class="line">factorial_n = factorial(<span class="number">5</span>)</span><br><span class="line">print(factorial_n)</span><br></pre></td></tr></table></figure><p>examle 3 - Fibonacci数列 1,1,2,3,5,8,13,21,34,55,…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fibonacci(n<span class="number">-1</span>) + fibonacci(n<span class="number">-2</span>)</span><br><span class="line"><span class="comment"># main Program</span></span><br><span class="line">fibonacci_n = fibonacci(<span class="number">10</span>)</span><br><span class="line">print(fibonacci_n)</span><br></pre></td></tr></table></figure><h2 id="Error-handling"><a href="#Error-handling" class="headerlink" title="Error handling"></a>Error handling</h2><h3 id="syntax-error-句法错误"><a href="#syntax-error-句法错误" class="headerlink" title="syntax error 句法错误"></a>syntax error 句法错误</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span> print(<span class="string">&#x27;Hello&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="exceptions-例外"><a href="#exceptions-例外" class="headerlink" title="exceptions 例外"></a>exceptions 例外</h3><p>all the exception errors:<br><a href="https://docs.python.org/3.6/library/exceptions.html">https://docs.python.org/3.6/library/exceptions.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ZeroDivisionError</span></span><br><span class="line">x = <span class="number">1</span>/<span class="number">0</span></span><br><span class="line"><span class="comment"># TypeError</span></span><br><span class="line">y = <span class="number">1</span> + <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="comment"># NameError</span></span><br><span class="line">z = new_variable - <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="handling-try-except"><a href="#handling-try-except" class="headerlink" title="handling - try / except"></a>handling - try / except</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    statements</span><br><span class="line"><span class="keyword">except</span> exception_type1, var:</span><br><span class="line">    statements</span><br><span class="line"><span class="keyword">except</span> exception_type2, var:</span><br><span class="line">    statements</span><br><span class="line">[<span class="keyword">else</span>:]</span><br><span class="line">    statements</span><br><span class="line">[<span class="keyword">finally</span>:] <span class="comment"># always executed</span></span><br><span class="line">    statements</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Name error</span></span><br><span class="line">x_1 = y_1 + <span class="number">1</span></span><br><span class="line">print(x_1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    x_1 = y_1 + <span class="number">1</span></span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">    print(<span class="string">&quot;The variable name is not defined!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(x_1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># zero division error</span></span><br><span class="line">x,y = <span class="number">2</span>, <span class="number">0</span></span><br><span class="line">z = x / y</span><br><span class="line">print(z)</span><br><span class="line"></span><br><span class="line">x,y = <span class="number">2</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    z = x / y</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">&quot;Divide by zero!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(z)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例</span></span><br><span class="line">x = input(<span class="string">&quot;Please enter a number different from zero: &quot;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    y = <span class="number">1</span>/float(x)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">&quot;Division by zero error!&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    print(<span class="string">&quot;The input is not a number!&quot;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">&quot;Something went wrong!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:   </span><br><span class="line">    print(<span class="string">&quot;The 1/&#123;0&#125; is &#123;1&#125;&quot;</span>.format(x,y))</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">&quot;End.&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="week-10-classes-1"><a href="#week-10-classes-1" class="headerlink" title="week 10 classes 1"></a>week 10 classes 1</h1><h2 id="creating-and-using-classes"><a href="#creating-and-using-classes" class="headerlink" title="creating and using classes"></a>creating and using classes</h2><p>class = header + body<br>class attributes = data(objects) + procedures(methods)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>:</span></span><br><span class="line"></span><br><span class="line">    &lt;statements: usually function definitions&gt;</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A simple class&quot;&quot;&quot;</span></span><br><span class="line">    x = <span class="number">123</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># a specific initial state</span></span><br><span class="line">    <span class="comment"># self refers to the  current instance of the class</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.data = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">my_function</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># attribute refereces:</span></span><br><span class="line">    <span class="comment"># MyClass.x returns a integer</span></span><br><span class="line">    <span class="comment"># MyClass.my_function() returns a function object</span></span><br><span class="line">    <span class="comment"># MyClass.x = 1 class attributes can be assigned to so the value of MyClass.x can be changed by assignment</span></span><br></pre></td></tr></table></figure><h3 id="built-in-class-attributes"><a href="#built-in-class-attributes" class="headerlink" title="built-in class attributes"></a>built-in class attributes</h3><ul><li>MyClass.<strong>doc</strong> (access to the docstring of the class) returns “A simple class”</li><li>MyClass.<strong>dict</strong> (a dictionary holding the class namespace)</li><li>MyClass.<strong>name</strong> (name of the class)</li><li>MyClass.<strong>module</strong> (name of the module in which the class is defined)</li></ul><h3 id="create-a-instance-of-a-class"><a href="#create-a-instance-of-a-class" class="headerlink" title="create a instance of a class"></a>create a instance of a class</h3><p>creates a new instance of the class and assigns this object to the local variable FirstClass:<br><code>FirstClass = MyClass()</code></p><p>print(FirstClass.x)<br>FirstClass.my_function()</p><p>FirstClass = MyClass()<br>SecondClass = MyClass()</p><p>example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coordinate</span>(<span class="params">object</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Initializer / Instance attributes          </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x, y</span>):</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Instance method</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">distance</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        dist = ((self.x-other.x)**<span class="number">2</span> + (self.y-other.y)**<span class="number">2</span>) **<span class="number">0.5</span></span><br><span class="line">        <span class="keyword">return</span> dist</span><br><span class="line">   </span><br><span class="line">     <span class="comment"># Instance method</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + str(self.x) + <span class="string">&quot;,&quot;</span> + str(self.y) +<span class="string">&quot;)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a new instance:</span></span><br><span class="line">c = Coordinate(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check the values of the object</span></span><br><span class="line">print(c)</span><br><span class="line"><span class="comment"># Output: (3,4)</span></span><br><span class="line">print(c.x)</span><br><span class="line"><span class="comment"># Output: 3</span></span><br><span class="line">print(c.y)</span><br><span class="line"><span class="comment"># Output: 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Check the type of the class and its instance</span></span><br><span class="line">print(type(c))</span><br><span class="line"><span class="comment"># Output: &lt;class &#x27;__main__.Coordinate&#x27;&gt;</span></span><br><span class="line">print(Coordinate)</span><br><span class="line"><span class="comment"># Output: &lt;class &#x27;__main__.Coordinate&#x27;&gt;</span></span><br><span class="line">print(type(Coordinate))</span><br><span class="line"><span class="comment"># Output: &lt;class &#x27;type&#x27;&gt; </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Check if c is an instance of the class</span></span><br><span class="line">print(isinstance(c, Coordinate))</span><br><span class="line"><span class="comment"># Output: True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define a new coordinate</span></span><br><span class="line">newPoint = Coordinate(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use the class method to calculate the distance:</span></span><br><span class="line">print(c.distance(newPoint))</span><br><span class="line"><span class="comment"># Output: 5.0</span></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">print(Coordinate.distance(c,newPoint))</span><br><span class="line"><span class="comment"># Output: 5.0</span></span><br></pre></td></tr></table></figure><h2 id="class-variables-and-instance-variables"><a href="#class-variables-and-instance-variables" class="headerlink" title="class variables and instance variables"></a>class variables and instance variables</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Students</span>:</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment"># Class Attribute</span></span><br><span class="line">    level = <span class="string">&#x27;bachelor&#x27;</span>  </span><br><span class="line">    <span class="comment"># Instance Attribute      </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name      </span><br><span class="line"></span><br><span class="line">d.level</span><br><span class="line"><span class="comment"># Output: &#x27;bachelor&#x27;</span></span><br><span class="line">e.level</span><br><span class="line"><span class="comment"># Output: &#x27;bachelor&#x27;</span></span><br><span class="line"></span><br><span class="line">d.name </span><br><span class="line"><span class="comment"># Output: &#x27;Walter White&#x27;          </span></span><br><span class="line">e.name </span><br><span class="line"><span class="comment"># Output: &#x27;Bill Black&#x27; </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># class variable 是可变的 mutable</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Students</span>:</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment"># Class Attribute</span></span><br><span class="line">    lectures = []</span><br><span class="line">    level = <span class="string">&#x27;bachelor&#x27;</span></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="comment"># Initializer / Instance Attribute</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">   </span><br><span class="line">    <span class="comment"># Instance Method</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_lecture</span>(<span class="params">self, new_lecture</span>):</span></span><br><span class="line">        self.lectures.append(new_lecture)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Instantiate the students object:</span></span><br><span class="line">d = Students(<span class="string">&#x27;Walter White&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Call the instance method:</span></span><br><span class="line">d.add_lecture(<span class="string">&#x27;Lineare Algebra&#x27;</span>)</span><br><span class="line">print(d.lectures)</span><br><span class="line"><span class="comment"># Output: [&#x27;Lineare Algebra&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Instantiate the students object:</span></span><br><span class="line">e = Students(<span class="string">&#x27;Bill Black&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Call the instance method:</span></span><br><span class="line">e.add_lecture(<span class="string">&#x27;Numerical Analysis&#x27;</span>)</span><br><span class="line">print(e.lectures)</span><br><span class="line"><span class="comment"># Output: [&#x27;Lineare Algebra&#x27;, &#x27;Numerical Analysis&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># To check the class variable again</span></span><br><span class="line">print(d.lectures)</span><br><span class="line"><span class="comment"># Output: [&#x27;Lineare Algebra&#x27;, &#x27;Numerical Analysis&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># As you can see, the value of the class variable &quot;lectures&quot; has been modified and as it is a mutable object the new value is added to it.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确的写法：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Students</span>:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Class Attribute</span></span><br><span class="line">    level = <span class="string">&#x27;bachelor&#x27;</span>   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Initializer / Instance Attribute</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="comment"># we create an empty list for each student</span></span><br><span class="line">        self.lectures = []         </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Instance Method</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_lecture</span>(<span class="params">self, new_lecture</span>):</span></span><br><span class="line">        self.lectures.append(new_lecture) </span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实现时间加法 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Time</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;represents the time of day.</span></span><br><span class="line"><span class="string">    attributes: hour, minute, second&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, hour=<span class="number">0</span>, minute=<span class="number">0</span>, second=<span class="number">0</span></span>):</span></span><br><span class="line">    </span><br><span class="line">        self.hour = hour</span><br><span class="line">        self.minute = minute</span><br><span class="line">        self.second = second</span><br><span class="line">               </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_time</span>(<span class="params">t1, t2</span>):</span></span><br><span class="line">    </span><br><span class="line">        sum = Time()</span><br><span class="line">        sum.hour = t1.hour + t2.hour</span><br><span class="line">        sum.minute = t1.minute + t2.minute</span><br><span class="line">        sum.second = t1.second + t2.second</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">if</span> sum.second &gt;= <span class="number">60</span>:</span><br><span class="line">            sum.second -= <span class="number">60</span></span><br><span class="line">            sum.minute += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> sum.minute &gt;= <span class="number">60</span>:</span><br><span class="line">            sum.minute -= <span class="number">60</span></span><br><span class="line">            sum.hour += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> sum</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_time</span>(<span class="params">time</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;%.2d:%.2d:%.2d&#x27;</span> % (time.hour, time.minute, time.second))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Test:</span></span><br><span class="line">time = Time(<span class="number">9</span>,<span class="number">45</span>,<span class="number">0</span>)</span><br><span class="line">duration = Time(<span class="number">1</span>,<span class="number">35</span>,<span class="number">0</span>)</span><br><span class="line">output = time.add_time(duration)</span><br><span class="line">output.print_time()</span><br></pre></td></tr></table></figure><h1 id="week-11-classes-2"><a href="#week-11-classes-2" class="headerlink" title="week 11 classes 2"></a>week 11 classes 2</h1><h2 id="class-methods"><a href="#class-methods" class="headerlink" title="class methods"></a>class methods</h2><ol><li><strong>str</strong> printing</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,x=<span class="number">0</span>,y=<span class="number">0</span></span>):</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;(&#x27;</span> + str(self.x) +  <span class="string">&#x27;, &#x27;</span> + str(self.y) +  <span class="string">&#x27;) &#x27;</span></span><br><span class="line"></span><br><span class="line">p = Point(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">print(p.__str__())</span><br><span class="line"><span class="comment"># Output: (1, 2)</span></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">p = Point(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">print(p)</span><br><span class="line"><span class="comment"># Output: (1, 2)</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p><strong>add</strong> <strong>sub</strong> <strong>mul</strong> <strong>rmul</strong> +-*/</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,x=<span class="number">0</span>,y=<span class="number">0</span></span>):</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;(&#x27;</span> + str(self.x) +  <span class="string">&#x27;, &#x27;</span> + str(self.y) +  <span class="string">&#x27;) &#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># operator overloading</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> Point(self.x + other.x, self.y + other.y)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__sub__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> Point(self.x - other.x, self.y - other.y) </span><br><span class="line"></span><br><span class="line">    <span class="comment"># Multiplication (dot product): __mul__</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__mul__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.x * other.x + self.y * other.y</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Multiplication (scalar product): __rmul__</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__rmul__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> Point(self.x * other, self.y * other)</span><br><span class="line">   </span><br><span class="line">p1 = Point(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">p2 = Point(<span class="number">-2</span>,<span class="number">3</span>)</span><br><span class="line">p3 = p1 + p2</span><br><span class="line">print(p3)</span><br><span class="line"><span class="comment"># Output: (-1, 5)</span></span><br><span class="line"><span class="comment"># Another way is to say : p1.__add__(p2)</span></span><br><span class="line">print(p1 - p2)</span><br><span class="line"><span class="comment"># Output: (3, -1)</span></span><br><span class="line"> print(p1*p2)</span><br><span class="line"><span class="comment"># Output: 4</span></span><br><span class="line"><span class="keyword">print</span> (<span class="number">2</span>*p1) </span><br><span class="line"><span class="comment"># Output: (2, 4)</span></span><br></pre></td></tr></table></figure></li><li><p>comparison operators &lt; &lt;= &gt; ==</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Card</span>:</span></span><br><span class="line"></span><br><span class="line">    suitList = [<span class="string">&quot;null&quot;</span>, <span class="string">&quot;Clubs &quot;</span>, <span class="string">&quot;Diamonds &quot;</span>, <span class="string">&quot;Hearts &quot;</span>, <span class="string">&quot;Spades &quot;</span>]</span><br><span class="line">    rankList = [<span class="string">&quot;null&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>,</span><br><span class="line">                <span class="string">&quot;9&quot;</span>, <span class="string">&quot;10&quot;</span>, <span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;Queen&quot;</span>, <span class="string">&quot;King&quot;</span>, <span class="string">&quot;Ace&quot;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, rank=<span class="number">0</span>, suit=<span class="number">0</span></span>):</span></span><br><span class="line">        self.suit = suit</span><br><span class="line">        self.rank = rank</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> (self.rankList[self.rank] +  <span class="string">&#x27; of &#x27;</span> +</span><br><span class="line">                self.suitList[self.suit])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span>(<span class="params">self, other</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># If suit is smaller or suits are the same and rank is smaller</span></span><br><span class="line">        <span class="keyword">if</span> (self.suit &lt; other.suit) <span class="keyword">or</span> ((self.suit == other.suit) <span class="keyword">and</span> (self.rank &lt; other.rank)):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;True&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;False&#x27;</span></span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__gt__</span>(<span class="params">self, other</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># If suit is bigger or suits are the same and rank is bigger</span></span><br><span class="line">        <span class="keyword">if</span> (self.suit &gt; other.suit) <span class="keyword">or</span> ((self.suit == other.suit) <span class="keyword">and</span> (self.rank &gt; other.rank)):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;True&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;False&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span>(<span class="params">self, other</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># If suits and ranks are both the same, it is a tie</span></span><br><span class="line">        <span class="keyword">if</span> (self.suit == other.suit) <span class="keyword">and</span>  (self.rank == other.rank):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;True&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;False&#x27;</span></span><br><span class="line"></span><br><span class="line">c1 = Card(<span class="number">13</span>,<span class="number">1</span>)</span><br><span class="line">c2 = Card(<span class="number">12</span>,<span class="number">1</span>)</span><br><span class="line">c1 &gt; c2</span><br><span class="line"><span class="comment"># Output: &#x27;True&#x27;</span></span><br><span class="line">c1 &lt; c2</span><br><span class="line"><span class="comment"># Output: &#x27;False&#x27;</span></span><br><span class="line">c1 == c2</span><br><span class="line"><span class="comment"># Output: &#x27;False&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># six comparison operators</span></span><br><span class="line"><span class="comment"># &lt;  :    __lt__(self, other) </span></span><br><span class="line"><span class="comment"># &lt;= :    __le__(self, other) </span></span><br><span class="line"><span class="comment"># == :    __eq__(self, other) </span></span><br><span class="line"><span class="comment"># != :    __ne__(self, other) </span></span><br><span class="line"><span class="comment"># &gt;  :    __gt__(self, other) </span></span><br><span class="line"><span class="comment"># &gt;= :    __ge__(self, other) </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>iter</strong> used to allow your type to be used in for loops (most containers)<br>for statement calls iter() on the container object and returns a iterator object which defines the method <code>__next()__</code> which can access elements of the container one at a time</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">&#x27;abs&#x27;</span></span><br><span class="line">i = iter(x)</span><br><span class="line">i</span><br><span class="line"><span class="comment"># Output: &lt;str_iterator object at 0x7f05af60bdd8&gt;</span></span><br><span class="line">next(i)</span><br><span class="line"><span class="comment"># Output: &#x27;a&#x27;</span></span><br><span class="line">next(i)</span><br><span class="line"><span class="comment"># Output: &#x27;b&#x27;</span></span><br><span class="line">next(i)</span><br><span class="line"><span class="comment"># Output: &#x27;s&#x27;</span></span><br><span class="line">next(i)</span><br><span class="line"><span class="comment"># Output: Traceback</span></span><br></pre></td></tr></table></figure><p>iterator object must imlement two special methods <strong>iter</strong>() and <strong>next</strong>()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PowersOfTwo</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot; Iterator to calculate powers of two&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, max = <span class="number">0</span></span>):</span></span><br><span class="line">        self.max = max</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.n = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.n &lt;= self.max:</span><br><span class="line">            result = <span class="number">2</span> ** self.n</span><br><span class="line">            self.n += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"><span class="comment"># Option 1.</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> PowersOfTwo(<span class="number">4</span>):</span><br><span class="line">        print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Output:</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="comment"># 8</span></span><br><span class="line"><span class="comment"># 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Option 2.</span></span><br><span class="line">a = PowersOfTwo(<span class="number">4</span>)</span><br><span class="line">i= iter(a)</span><br><span class="line">next(i)</span><br><span class="line"><span class="comment"># Output: 1</span></span><br><span class="line">next(i)</span><br><span class="line"><span class="comment"># Output: 2</span></span><br><span class="line">next(i)</span><br><span class="line"><span class="comment"># Output: 4</span></span><br><span class="line">next(i)</span><br><span class="line"><span class="comment"># Output: 8</span></span><br><span class="line">next(i)</span><br><span class="line"><span class="comment"># Output: 16</span></span><br><span class="line">next(i)</span><br><span class="line"><span class="comment"># Output: Traceback...</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>generator function:</strong><br>yield statemetn turns a function into a generator.<br>generator functions return a generator object.<br>generator objects are used either by call the next method on the generator object or using the generator object in a for loop.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PowersOfTwo</span>(<span class="params">max = <span class="number">0</span></span>):</span></span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &lt;= max:</span><br><span class="line">        <span class="keyword">yield</span> <span class="number">2</span> ** n</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> PowersOfTwo(<span class="number">4</span>):</span><br><span class="line">        print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Output:</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="comment"># 8</span></span><br><span class="line"><span class="comment"># 16</span></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"></span><br><span class="line">x = PowersOfTwo(<span class="number">4</span>)</span><br><span class="line">print(next(x))</span><br><span class="line"><span class="comment"># Output: 1</span></span><br><span class="line">print(next(x))</span><br><span class="line"><span class="comment"># Output: 2</span></span><br><span class="line">print(next(x))</span><br><span class="line"><span class="comment"># Output: 4</span></span><br><span class="line">print(next(x))</span><br><span class="line"><span class="comment"># Output: 8</span></span><br><span class="line">print(next(x))</span><br><span class="line"><span class="comment"># Output: 16</span></span><br><span class="line">print(next(x))</span><br><span class="line"><span class="comment"># Output: Traceback...</span></span><br></pre></td></tr></table></figure><h2 id="inheritance"><a href="#inheritance" class="headerlink" title="inheritance"></a>inheritance</h2><p>child class and parent class<br>沿用parent class的attributes 同时创建新的attributes</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Parent class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="comment"># Class attribute</span></span><br><span class="line">    university_name = <span class="string">&quot;uzh&quot;</span></span><br><span class="line">    <span class="comment"># Instance attributes</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, first, last</span>):</span></span><br><span class="line">        self.first = first</span><br><span class="line">        self.last = last</span><br><span class="line">        self.email = first + <span class="string">&#x27;.&#x27;</span> + last + <span class="string">&#x27;@uzh.com&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Instance method</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fullname</span>(<span class="params">self</span>):</span></span><br><span class="line">       <span class="keyword">return</span> self.first + <span class="string">&#x27;.&#x27;</span> + self.last</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># Child class (inherits from Person class)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">Person</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Class variable</span></span><br><span class="line">    Category = <span class="string">&quot;Student&quot;</span></span><br><span class="line">    <span class="comment"># Instance attributes   </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, first, last, student_type, student_id</span>):</span></span><br><span class="line">        Person.__init__(self, first, last)</span><br><span class="line">        self.classes = []</span><br><span class="line">        self.student_type = student_type</span><br><span class="line">        self.student_id = student_id</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">    <span class="comment"># Instance method</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enroll</span>(<span class="params">self, course</span>):</span></span><br><span class="line">        self.classes.append(course)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Child class (inherits from Person class)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaffMember</span>(<span class="params">Person</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Class variable</span></span><br><span class="line">    Category = <span class="string">&quot;Staff&quot;</span></span><br><span class="line">    <span class="comment"># Instance attributes    </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, first, last, employment_type</span>):</span></span><br><span class="line">        Person.__init__(self, first, last)</span><br><span class="line">        self.employment_type = employment_type</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># Our parent class is Person, which represents any person associated with a university. We create a subclass to represent students and one to represent staff members.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Example.</span></span><br><span class="line"></span><br><span class="line">Pink = Student(<span class="string">&quot;Albert&quot;</span>, <span class="string">&quot;Pink&quot;</span>,<span class="string">&quot;Postgraduate&quot;</span>, <span class="number">17980752</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Now we can add Lectures for him.</span></span><br><span class="line">Pink.enroll(<span class="string">&quot;MATH101&quot;</span>)</span><br><span class="line">Pink.classes</span><br><span class="line"><span class="comment"># Output: [&#x27;MATH101&#x27;]</span></span><br><span class="line">Pink.email</span><br><span class="line"><span class="comment"># Output: &#x27;Albert.Pink@uzh.com&#x27;</span></span><br><span class="line">Pink.university_name</span><br><span class="line"><span class="comment"># Output: &#x27;uzh&#x27;</span></span><br><span class="line">Pink.Category</span><br><span class="line"><span class="comment"># Output: &#x27;Student&#x27;</span></span><br><span class="line">Brown = StaffMember(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Brown&quot;</span>, <span class="string">&quot;Permanent&quot;</span>)</span><br><span class="line">print(Brown.fullname())</span><br><span class="line"><span class="comment"># Output: Bob.Brown</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note. We can check if an instance is also an instance of a certain parent class by using the isinstance() function.</span></span><br><span class="line">print(isinstance(Brown, Person))</span><br><span class="line"><span class="comment"># Output: True</span></span><br><span class="line">print(isinstance(Pink, Person))</span><br><span class="line"><span class="comment"># Output: True</span></span><br><span class="line">print(isinstance(Brown, StaffMember))</span><br><span class="line"><span class="comment"># Output: True</span></span><br><span class="line">print(isinstance(Brown, Student))</span><br><span class="line"><span class="comment"># Output: False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  Note. We can also check if a class is a child (subclass) of another class by using the issubclass() function.</span></span><br><span class="line">issubclass(Student,Person)</span><br><span class="line"><span class="comment"># Output: True</span></span><br><span class="line">issubclass(StaffMember,Person)</span><br><span class="line"><span class="comment"># Output: True</span></span><br></pre></td></tr></table></figure><p>example 2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################# Sample Code 1 #####################</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Time</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;represents the time of day.</span></span><br><span class="line"><span class="string">    attributes: hour, minute, second&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, hour=<span class="number">0</span>, minute=<span class="number">0</span>, second=<span class="number">0</span></span>):</span></span><br><span class="line">        self.hour = hour</span><br><span class="line">        self.minute = minute</span><br><span class="line">        self.second = second</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        sum = Time()</span><br><span class="line">        sum.hour = self.hour + other.hour</span><br><span class="line">        sum.minute = self.minute + other.minute</span><br><span class="line">        sum.second = self.second + other.second</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">if</span> sum.second &gt;= <span class="number">60</span>:</span><br><span class="line">            sum.second -= <span class="number">60</span></span><br><span class="line">            sum.minute += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> sum.minute &gt;= <span class="number">60</span>:</span><br><span class="line">            sum.minute -= <span class="number">60</span></span><br><span class="line">            sum.hour += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> sum</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%.2d:%.2d:%.2d&#x27;</span> % (self.hour, self.minute, self.second)</span><br><span class="line"><span class="comment">######</span></span><br><span class="line"><span class="comment"># Test:#</span></span><br><span class="line"><span class="comment">######</span></span><br><span class="line">time = Time(<span class="number">9</span>,<span class="number">45</span>,<span class="number">40</span>)</span><br><span class="line">print(time)</span><br><span class="line">duration = Time(<span class="number">1</span>,<span class="number">35</span>,<span class="number">50</span>)</span><br><span class="line">print(duration)</span><br><span class="line">print(time+duration)</span><br><span class="line"></span><br><span class="line"><span class="comment">######################################################</span></span><br><span class="line"><span class="comment">####### Sample Code 2 - Generalisation ##################### </span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Time</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;represents the time of day.</span></span><br><span class="line"><span class="string">    attributes: hour, minute, second&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, hour=<span class="number">0</span>, minute=<span class="number">0</span>, second=<span class="number">0</span></span>):</span></span><br><span class="line">        self.hour = hour</span><br><span class="line">        self.minute = minute</span><br><span class="line">        self.second = second</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">time_to_int</span>(<span class="params">self</span>):</span></span><br><span class="line">        minutes = self.hour * <span class="number">60</span> + self.minute</span><br><span class="line">        seconds = minutes * <span class="number">60</span> + self.second</span><br><span class="line">        <span class="keyword">return</span> seconds</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">int_to_time</span>(<span class="params">self, seconds</span>):</span></span><br><span class="line">        new = Time()</span><br><span class="line">        minutes, new.second = divmod(seconds, <span class="number">60</span>)</span><br><span class="line">        new.hour, new.minute = divmod(minutes, <span class="number">60</span>)</span><br><span class="line">        <span class="keyword">return</span> new</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        seconds = self.time_to_int() + other.time_to_int()</span><br><span class="line">        <span class="keyword">return</span> self.int_to_time(seconds)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%.2d:%.2d:%.2d&#x27;</span> % (self.hour, self.minute, self.second)</span><br><span class="line"><span class="comment">#######</span></span><br><span class="line"><span class="comment"># Test 1:#</span></span><br><span class="line"><span class="comment">#######</span></span><br><span class="line">time = Time(<span class="number">9</span>,<span class="number">45</span>,<span class="number">40</span>)</span><br><span class="line">print(time)</span><br><span class="line"></span><br><span class="line">duration = Time(<span class="number">1</span>,<span class="number">35</span>,<span class="number">50</span>)</span><br><span class="line">print(duration)</span><br><span class="line"></span><br><span class="line">print(time+duration)</span><br><span class="line"><span class="comment">#######</span></span><br><span class="line"><span class="comment"># Test 2:#</span></span><br><span class="line"><span class="comment">#######</span></span><br><span class="line">time = Time(<span class="number">1</span>,<span class="number">35</span>,<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">duration = Time(<span class="number">1</span>,<span class="number">450</span>,<span class="number">140</span>)</span><br><span class="line"></span><br><span class="line">result = time+duration</span><br><span class="line"></span><br><span class="line">print(result)</span><br><span class="line"><span class="comment">#############</span></span><br><span class="line"><span class="comment"># to check if the result is correct,</span></span><br><span class="line"><span class="comment"># we convert all values to seconds and do the comparision</span></span><br><span class="line"><span class="comment">#############</span></span><br><span class="line">sec_1 = time.time_to_int()</span><br><span class="line">print(sec_1)</span><br><span class="line"></span><br><span class="line">sec_2 = duration.time_to_int()</span><br><span class="line">print(sec_2)</span><br><span class="line"></span><br><span class="line">sec_3 = result.time_to_int()</span><br><span class="line">print(sec_3)</span><br><span class="line"></span><br><span class="line">print(sec_3 == sec_1+sec_2)</span><br></pre></td></tr></table></figure><h1 id="week-12-模块-Numpy-Mathplotlib"><a href="#week-12-模块-Numpy-Mathplotlib" class="headerlink" title="week 12 模块 Numpy Mathplotlib"></a>week 12 模块 Numpy Mathplotlib</h1><p>more built in modules in python:<br><a href="https://docs.python.org/3.6/library/index.html">https://docs.python.org/3.6/library/index.html</a></p><h2 id="Module-II"><a href="#Module-II" class="headerlink" title="Module II"></a>Module II</h2><h3 id="collections-counter"><a href="#collections-counter" class="headerlink" title="collections - counter"></a>collections - counter</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">cnt = Counter()</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]:</span><br><span class="line">    cnt[word] += <span class="number">1</span></span><br><span class="line">print(<span class="string">&quot;Total counter:&quot;</span>, cnt)</span><br><span class="line">print(<span class="string">&quot;blue&quot;</span>, cnt[<span class="string">&quot;blue&quot;</span>])</span><br><span class="line">print(<span class="string">&quot;Yellow&quot;</span>, cnt[<span class="string">&quot;yellow&quot;</span>])</span><br><span class="line"></span><br><span class="line">Counter(<span class="string">&#x27;abracadabra&#x27;</span>).most_common(<span class="number">3</span>)</span><br><span class="line">Counter(<span class="string">&#x27;abracadabra&#x27;</span>).most_common()</span><br><span class="line"></span><br><span class="line">c = Counter(a=<span class="number">4</span>, b=<span class="number">2</span>, c=<span class="number">0</span>, d=<span class="number">-2</span>) <span class="comment"># If an element’s count is less than one, elements() will ignore it.</span></span><br><span class="line">list(c.elements())</span><br></pre></td></tr></table></figure><h3 id="profile-and-cprofile"><a href="#profile-and-cprofile" class="headerlink" title="profile and cprofile"></a>profile and cprofile</h3><ul><li>cProfile and profile provide deterministic profiling of Python programs. A profile is a set of statistics that describes <strong>how often and for how long</strong> various parts of the program executed. </li><li>The profile and cProfile modules export the same interface, so they are mostly interchangeable; cProfile has a much lower overhead but is newer and might not be available on all systems.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cProfile</span><br><span class="line">cProfile.run(<span class="string">&#x27;200* 200&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># compare different methods</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">with_add</span>(<span class="params">n</span>):</span></span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        tmp = tmp + [i**<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">with_append</span>(<span class="params">n</span>):</span></span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        tmp.append(i**<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">with_comprehension</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> [i**<span class="number">3</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>, <span class="number">1200</span>):</span><br><span class="line">        tmp = with_comprehension(i)</span><br><span class="line">        tmp = with_append(i)</span><br><span class="line">        tmp = with_add(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Main body</span></span><br><span class="line"><span class="keyword">import</span> cProfile</span><br><span class="line">cProfile.run(<span class="string">&quot;test()&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h2><p>useful functions and subpackages for numpy:<br><a href="https://docs.scipy.org/doc/numpy/reference/index.html">https://docs.scipy.org/doc/numpy/reference/index.html</a></p><p>quick start tutorial look at:<br><a href="https://www.numpy.org/devdocs/user/quickstart.html">https://www.numpy.org/devdocs/user/quickstart.html</a></p><p>or simple type:<br><code>help(&quot;numpy&quot;)</code><br><code>help(&quot;numpy.linalg&quot;)</code><br><code>help(&quot;numpy.polynomial&quot;)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a numpy</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>])</span><br><span class="line">b = np.array([<span class="number">11.2</span>, <span class="number">13.5</span>, <span class="number">15.1</span>])</span><br><span class="line">c = np.array([<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>], dtype = int)</span><br><span class="line">f = np.array([<span class="string">&#x27;Bonjour&#x27;</span>, <span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;Hallo&#x27;</span>])</span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line">print(type(a))</span><br><span class="line">type(a)</span><br><span class="line">print(a.dtype)</span><br><span class="line">a.dtype</span><br><span class="line"></span><br><span class="line"><span class="comment"># n dimensional array</span></span><br><span class="line">M = np.array([(<span class="number">1.5</span>,<span class="number">2</span>,<span class="number">3</span>), (<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)])</span><br><span class="line">N = np.array([[[<span class="number">1</span>], [<span class="number">2</span>]], [[<span class="number">3</span>], [<span class="number">4</span>]]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dimension of the array as a tuple</span></span><br><span class="line">print(<span class="string">&quot; c &quot;</span> ,c.shape)</span><br><span class="line">print(<span class="string">&quot; M &quot;</span>, M.shape)</span><br><span class="line">print(<span class="string">&quot; N &quot;</span> ,N.shape)</span><br><span class="line"><span class="comment"># Size of the first dimension</span></span><br><span class="line">print(<span class="string">&quot; c &quot;</span>, len(c))</span><br><span class="line">print(<span class="string">&quot; M &quot;</span>, len(M))</span><br><span class="line">print(<span class="string">&quot; N &quot;</span>, len(N))</span><br><span class="line"><span class="comment"># Number of dimension of the array</span></span><br><span class="line">print(<span class="string">&quot; c &quot;</span> ,c.ndim)</span><br><span class="line">print(<span class="string">&quot; M &quot;</span>, M.ndim)</span><br><span class="line">print(<span class="string">&quot; N &quot;</span> ,N.ndim)</span><br><span class="line"></span><br><span class="line"><span class="comment"># access the elements</span></span><br><span class="line">c[<span class="number">0</span>]</span><br><span class="line">M[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">N[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># access a column</span></span><br><span class="line">M[:,<span class="number">2</span>]</span><br><span class="line">N[:,:,<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># special arrays</span></span><br><span class="line">I = np.eye(<span class="number">3</span>)</span><br><span class="line">Null_Matrix = np.zeros((<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">D = np.diag(np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]))</span><br><span class="line">ones_Matrix = np.ones((<span class="number">2</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure><h2 id="Mathplotlib"><a href="#Mathplotlib" class="headerlink" title="Mathplotlib"></a>Mathplotlib</h2><p>more detailed documents:<br><a href="http://matplotlib.org/tutorials/">http://matplotlib.org/tutorials/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># plot a function</span></span><br><span class="line">x = np.linspace (<span class="number">-10</span>, <span class="number">10</span>, <span class="number">1000</span>)</span><br><span class="line">y = np.power(x, <span class="number">3</span>)</span><br><span class="line">plt.plot (x, y)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># add annotations to the plot</span></span><br><span class="line">x = np. linspace (<span class="number">-10</span>, <span class="number">10</span>, <span class="number">1000</span>)</span><br><span class="line">y = np. power(x, <span class="number">3</span>)</span><br><span class="line">plt.plot (x, y, color = <span class="string">&#x27;red&#x27;</span>, linewidth = <span class="number">2</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;x values&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y values&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;y = x^3&#x27;</span>)</span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># multiplots</span></span><br><span class="line">x= np.linspace(<span class="number">0.0</span>, <span class="number">6.0</span>,<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">y1 = np.sin( np.pi * x)</span><br><span class="line">y2 = np.cos(np.pi * x)</span><br><span class="line"></span><br><span class="line">plt.plot (x, y1, color = <span class="string">&#x27;red&#x27;</span>, linewidth = <span class="number">2</span>,label=<span class="string">&#x27;sin(x)&#x27;</span>)</span><br><span class="line">plt.plot (x, y2, color = <span class="string">&#x27;blue&#x27;</span>, linewidth = <span class="number">2</span>,label=<span class="string">&#x27;cos(x)&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;x values&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y values&#x27;</span>)</span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># subplots</span></span><br><span class="line">x= np.linspace(<span class="number">0.0</span>, <span class="number">5.0</span>)</span><br><span class="line"></span><br><span class="line">y1 = np.sin( np.pi * x)</span><br><span class="line">y2 = np.cos(np.pi * x)</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">plt.plot(x, y1, <span class="string">&#x27;yo-&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;sin(x)&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">plt.plot(x, y2, <span class="string">&#x27;r.-&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;cos(x)&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line">plt.save.fig(<span class="string">&quot;figure.png&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="TKinter"><a href="#TKinter" class="headerlink" title="TKinter"></a>TKinter</h1><h2 id="create-a-window"><a href="#create-a-window" class="headerlink" title="create a window"></a>create a window</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line">win = tk.Tk()</span><br><span class="line">win.title(<span class="string">&quot;first window&quot;</span>)</span><br><span class="line">win.minsize(<span class="number">500</span>,<span class="number">400</span>)</span><br><span class="line"><span class="comment"># icon for the window</span></span><br></pre></td></tr></table></figure><p><a href="https://geekscoders.com/tkinter-tutorial-build-gui-in-python-with-tkinter/">https://geekscoders.com/tkinter-tutorial-build-gui-in-python-with-tkinter/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt; &lt;/center&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>简易的 git 命令行总结</title>
    <link href="http://yoursite.com/2020/10/31/Coding-2010-Git-simple-usage-md/"/>
    <id>http://yoursite.com/2020/10/31/Coding-2010-Git-simple-usage-md/</id>
    <published>2020-10-31T21:17:36.000Z</published>
    <updated>2021-07-23T18:18:17.879Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="简易的git命令行总结"><a href="#简易的git命令行总结" class="headerlink" title="简易的git命令行总结"></a>简易的git命令行总结</h1><p>（不需要安装github desktop，通用于一般的git项目）</p><h2 id="本文涉及到的命令"><a href="#本文涉及到的命令" class="headerlink" title="本文涉及到的命令"></a>本文涉及到的命令</h2><p><code>git clone &lt;repository网页地址&gt;</code><br><code>git pull</code><br><code>git add .</code><br><code>git commit -m &quot;替换成你的内容，比如add readme.md&quot;</code><br><code>git push</code></p><h2 id="命令行和操作解释"><a href="#命令行和操作解释" class="headerlink" title="命令行和操作解释"></a>命令行和操作解释</h2><ul><li><p>从远端获取project到本地<br><code>git clone &lt;repository网页地址&gt;</code></p></li><li><p>project有其他人进行更新后 从远端拉到本地，<br><code>cd &lt;project 所在目录&gt;</code><br><code>git pull</code></p></li><li><p>自己对project做相关更改后</p><ol><li>project目录下 添加自己的修改： <code>git add .</code></li><li>注释自己的修改：<code>git commit -m &quot;替换成你的内容，比如add readme.md&quot;</code></li><li>提交自己的修改：<code>git push</code></li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h1 id=&quot;简易的git命令行总结&quot;&gt;&lt;a href=&quot;#简易的git命令行总结&quot; class=&quot;headerlink&quot; title=&quot;简易的git命令行总结&quot;&gt;&lt;/a&gt;简易的git命令行总结&lt;/h1&gt;&lt;p&gt;（不需要安装github de
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[] &quot;RSS List Collection&quot;</title>
    <link href="http://yoursite.com/2020/10/25/RSS-List-Collection/"/>
    <id>http://yoursite.com/2020/10/25/RSS-List-Collection/</id>
    <published>2020-10-25T20:08:37.000Z</published>
    <updated>2021-07-23T18:18:17.881Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="RSS-汇总网址"><a href="#RSS-汇总网址" class="headerlink" title="RSS 汇总网址"></a>RSS 汇总网址</h2><p><a href="https://docs.rsshub.app/blog.html#latex-kai-yuan-xiao-wu">https://docs.rsshub.app/blog.html#latex-kai-yuan-xiao-wu</a></p><h2 id="general-info"><a href="#general-info" class="headerlink" title="general info"></a>general info</h2><ul><li>纽约时报： <a href="https://rsshub.app/nytimes/en">https://rsshub.app/nytimes/en</a></li><li>工信部： <a href="https://rsshub.app/gov/miit/zcjd">https://rsshub.app/gov/miit/zcjd</a></li><li>果壳专栏： <a href="https://rsshub.app/guokr/calendar">https://rsshub.app/guokr/calendar</a></li><li>apple：<a href="https://rsshub.app/apple/exchange_repair/zh-cn">https://rsshub.app/apple/exchange_repair/zh-cn</a></li><li><a href="https://rsshub.app/hackerone/hacktivity">https://rsshub.app/hackerone/hacktivity</a></li><li><a href="https://rsshub.app/nsfc/news/kpkx">https://rsshub.app/nsfc/news/kpkx</a></li><li><a href="https://rsshub.app/nsfc/news/jjyw">https://rsshub.app/nsfc/news/jjyw</a></li><li><a href="https://rsshub.app/csc/notice/lxtz">https://rsshub.app/csc/notice/lxtz</a></li><li>UI中国： <a href="https://rsshub.app/ui-cn/article">https://rsshub.app/ui-cn/article</a></li></ul><h2 id="科技资讯"><a href="#科技资讯" class="headerlink" title="科技资讯"></a>科技资讯</h2><ul><li>solidot： <a href="https://rsshub.app/solidot/science">https://rsshub.app/solidot/science</a></li><li>solidot： <a href="https://rsshub.app/solidot/technology">https://rsshub.app/solidot/technology</a></li><li>solidot： <a href="https://rsshub.app/solidot/apple">https://rsshub.app/solidot/apple</a></li><li>solidot： <a href="https://rsshub.app/solidot/cloud">https://rsshub.app/solidot/cloud</a></li><li>it之家 <a href="https://www.ithome.com/rss/">https://www.ithome.com/rss/</a></li><li>LaTeX 开源小屋：  <a href="https://rsshub.app/latexstudio/home">https://rsshub.app/latexstudio/home</a></li><li>阿里云系统组技术博客： <a href="https://rsshub.app/aliyun-kernel/index">https://rsshub.app/aliyun-kernel/index</a></li><li>阿里云数据库内核月报：<a href="https://rsshub.app/aliyun/database_month">https://rsshub.app/aliyun/database_month</a></li><li>技术头条：<a href="https://rsshub.app/blogread/newest">https://rsshub.app/blogread/newest</a></li><li>腾讯大数据： <a href="https://rsshub.app/tencent/bigdata">https://rsshub.app/tencent/bigdata</a></li><li>MIT科技评论：<a href="https://rsshub.app/mittrchina/article">https://rsshub.app/mittrchina/article</a></li><li>果壳科技人： <a href="https://rsshub.app/guokr/scientific">https://rsshub.app/guokr/scientific</a></li><li>LeetCode：<a href="https://rsshub.app/leetcode/articles">https://rsshub.app/leetcode/articles</a></li></ul><h2 id="杂志"><a href="#杂志" class="headerlink" title="杂志"></a>杂志</h2><ul><li>nature： <a href="https://rsshub.app/nature/research/nature">https://rsshub.app/nature/research/nature</a></li><li>nature biotech: <a href="https://rsshub.app/nature/research/nbt">https://rsshub.app/nature/research/nbt</a></li><li>nature neuro: <a href="https://rsshub.app/nature/research/neuro">https://rsshub.app/nature/research/neuro</a></li><li>nature genetics: <a href="https://rsshub.app/nature/research/ng">https://rsshub.app/nature/research/ng</a></li><li>nature machine intelligence: <a href="https://rsshub.app/nature/research/natmachintell">https://rsshub.app/nature/research/natmachintell</a></li><li>cell: <a href="https://rsshub.app/cell/cell/current">https://rsshub.app/cell/cell/current</a></li><li>cell: <a href="https://rsshub.app/cell/cell/inpress">https://rsshub.app/cell/cell/inpress</a></li><li>pubmed: <a href="https://rsshub.app/pubmed/trending">https://rsshub.app/pubmed/trending</a></li><li>IEEE Xplore(个人作品):</li><li>elife: <a href="https://rsshub.app/elife/cell-biology">https://rsshub.app/elife/cell-biology</a></li><li>elife: <a href="https://rsshub.app/elife/neuroscience">https://rsshub.app/elife/neuroscience</a></li><li>elife: <a href="https://rsshub.app/elife/computational-and-systems-biology">https://rsshub.app/elife/computational-and-systems-biology</a></li><li>pnas: <a href="https://rsshub.app/pnas/">https://rsshub.app/pnas/</a></li><li>NASA：<a href="https://rsshub.app/nasa/apod">https://rsshub.app/nasa/apod</a></li><li>国家地理：<a href="https://rsshub.app/natgeo/dailyphoto">https://rsshub.app/natgeo/dailyphoto</a></li></ul><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><ul><li>AI研习社：<a href="https://rsshub.app/aiyanxishe/all">https://rsshub.app/aiyanxishe/all</a></li><li>deeplearning.ai: <a href="https://rsshub.app/deeplearningai/thebatch">https://rsshub.app/deeplearningai/thebatch</a></li><li>dockone: <a href="https://rsshub.app/dockone/weekly">https://rsshub.app/dockone/weekly</a></li><li>kaggle: <a href="https://rsshub.app/kaggle/discussion/all/hot">https://rsshub.app/kaggle/discussion/all/hot</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h2 id=&quot;RSS-汇总网址&quot;&gt;&lt;a href=&quot;#RSS-汇总网址&quot; class=&quot;headerlink&quot; title=&quot;RSS 汇总网址&quot;&gt;&lt;/a&gt;RSS 汇总网址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://docs.rsshu
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[SUMMARY] &quot;2020 Autumn lecture lists&quot;</title>
    <link href="http://yoursite.com/2020/09/10/2020-Autumn-lecture-lists/"/>
    <id>http://yoursite.com/2020/09/10/2020-Autumn-lecture-lists/</id>
    <published>2020-09-10T09:18:49.000Z</published>
    <updated>2021-07-23T18:18:17.876Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="/image/title.png" alt=""></p><center>摘要</center><a id="more"></a><h1 id="VLSI"><a href="#VLSI" class="headerlink" title="VLSI"></a>VLSI</h1><p>Piazza link:<br><a href="http://piazza.com/ethz.ch/fall2020/227011600lvlsii?token=GEOjkXbd5Id">http://piazza.com/ethz.ch/fall2020/227011600lvlsii?token=GEOjkXbd5Id</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img data-src=&quot;/image/title.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;center&gt;摘要&lt;/center&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[] &quot;Lecture Coursera Aid Application&quot;</title>
    <link href="http://yoursite.com/2020/06/10/Lecture-Coursera-Aid-Application/"/>
    <id>http://yoursite.com/2020/06/10/Lecture-Coursera-Aid-Application/</id>
    <published>2020-06-10T16:15:55.000Z</published>
    <updated>2021-07-23T18:18:17.880Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="/image/title.png" alt=""></p><center>摘要</center><a id="more"></a><p>I am a master student who has just started my first semester of studying Neural systems and computation in ETHz and the University of Zurich in Switzerland. </p><p>Currently, my parents are supporting my live expense and I have no incoming yet. Switzerland is an expensive place for studying and living. The daily cost for living is already a heavy burden for my parents. I hope the burden of the family won’t be increased again because of some additional studies.</p><p>Coursera is a great platform with courses with great quality. With the chance of studying more state-of-art subjects, I think I can achieve a better academic result and afterward, I would be able to contribute the society more and better in the further.</p><p>Therefore I applied for financial aid and I promise I will finish the course in time.<br>Thanks for your time considering my application and I am looking forward to the positive feedback from your side.</p><p>Recently I have taken the class Machine Learning from Coursera which is of great quality and I have learned a lot from the lecture containing linear and nonlinear regression, classification, unsupervised learning, and so on. This lecture is accompanied with programming exercises that are based majorly on MATLAB and basic matrix calculations.<br>In addition, I would like to study some more application methods that have been widely used these days. Tensorflow is such a famous and powerful method that can be sufficiently used for machine learning, deep learning, and artificial intelligence problems.<br>The lecture I am applying for (TensorFlow in practice) would introduce the TensorFlow, and teach how the application in convolutional neural networks, natural language processing, sequences, time series, and prediction would be realized with TensorFlow. It is great training for learning machine learning and deep learning.<br>It can also help a lot with my following study program which plays the role of important assistant to my theoretical studies and my further career applications.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img data-src=&quot;/image/title.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;center&gt;摘要&lt;/center&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[Summary] Tasks</title>
    <link href="http://yoursite.com/2020/06/02/2020SUMMARY-Task/"/>
    <id>http://yoursite.com/2020/06/02/2020SUMMARY-Task/</id>
    <published>2020-06-02T09:54:27.000Z</published>
    <updated>2021-07-23T18:18:17.877Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Sorry, wrong password." data-whm="The article is confidential."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="Password is required here." /><label>Password is required here.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="a181731d54cc86f2a8239c075c8af90b23dedcf05080c0d0f6a5b08eba66d810">955690ca8dfff674d94e828de52c90c4c15994e0014b14807c2f789bfd4756ab0f1f7851fcbbbb07b6a86db3b5a6ef2156a4c9c1fe8e3a8568aaf615cb8653640275aaa9f4bad6444a8b8cad7c5b98604818a8e2b244105f712960d948347a81997c5c81a641eae9dc20e3676f1aa05730640a019bf6b17d5d2f7ad0454c03caa62c64bce4c4ebdc0755f5ca44a90a8e5a8f455ed7c39fa361ae8d1aec149dec7a155a4ce5fc60de5066337537df2f4fe457f00c5d127da74673560695d6dca895c6c4202c8e774d7c647c5eb84703a1648ae61061307af2589cb2bfa3670355fd53115ee139c5f9bbf2cf9fd24c8e22b2653a758eb3bd7a2a672a09102e71fb4a9629706184ba84ef9723e20da21e3b82eea7346a52b81510d06dddc047a1bfcbbded6ec0e23bd67f0f0f306de6ca061a8f5d5ab9727e1068e4206e19fdc4d8dbf4a1dadc23478364ee06a63f2a59db88d753c3d87d6eb2da8001b6f35a477a493466086361d6ad375a7b417a41ebf877ac30f3798e47908b572b46ccf7bc9c20d02ead22b7a68675869c1a7ecba30bbb8b2e0d219b8ac8dfb1c0312184fd8cf28761ba21598de2baf039d4b01e77791f3744c9d46bf00db29e90c5f9c75bcea0c945294e454955eedbe17a635b9e2ecf753bd7c72825726e22733d27bbf57d9ac4fc4be0a09d149c7e3ea257a4dcbf950d62f1329478a8332b0ff732704b9094986320c4d4ba21d715246160ec9f1ad0931ba2d3b82e19f39e183fe8edefe157d396c0506ae29ffa1c4ddec6ed63f043fdf5127b629e2c254bc707c155a38b2b1931c24310ab06dda9b51c908adf226d6608396dda9079aad567147e7624289261a64c3b1ea7a1d2bd7d51a66e7c45a87734ab863233cac6e67d96f66d542a0903d0250ebad275bd7a5c291a8f20033a2a3f61a8a4f6031db45d7626ae61db8164eac1ea9b69a9ed078ea0698811ef1f8889a9837b2880ecc050ad945145ae7276d58d71d857c95b51ba4daaae0c1fcd607ff54ef87766bad2057938fe30c71eff27ea5e3b7500fa355be15133a2065af862c36acdf8748edcf597fb4cf8825221023bd8e6764f1655be8631f470082964e9a249b5907033cdde0cae41f6495d2cf2761716d497ca034f2de90ed7937442105a89b00a001ffe0c0dab911f7d010cd28580564cbc59c1476e61759a069af354df7bfcd5fbec2f2c50b167f053cb9280d2f6bea633a6a63efcc703e41823d0d3eee7d11458e78bb08ace127f1303eaf008f501d4770b0055257bac32cb0d53a59e023540f62cf30908508bdd3e5883d43d96065a7b624a47c6ac21f4909a79dff1c5bce53abd617669e6f60074387f703202062336f16c84f829e2e397599811ba1bd24f08546810d9def7042351acd9e77b40567b941ebbc694d1a900f39818f15a9d2046f88e1bd92a0aa6713eb7d7754b15fbe74276b4fff36bfc113aaff94386b7a40e494f06fe5cc34968a0fec2d8ad7fd9f4fa6a3de3d8e3200c68d603d6a2c07e26da5a934040b10fd977f5c37946ebe3f233592d9720a4b24b4d4c591be459f46d25a4987bf64edb314931459680a9d13c8db36fa86379553ca6cbd318bcc51b15473cbc3f14dc16726af42e6a1df173267ac6dc7d7d677b9038d84619d00e48cd6da9762efbde8d473f6946c535abac05c20c553c99430e146dbe853fbb67aba40834213c8af7247e0714cfa09c14b944515b409e84e8a20d4278639cf5263382a092ae69d6da9501afd2915fc39af5d5476c32e17aa65a9cf5c36362f777a65db7dfb0be7b4ad06a733e9a36e5ae275f5214aa5f38cfd63470047d199aba51cd3d588bc8c1afae643f0b4b747e5defa6018bf49abf2e5b370725f71512eb35ad15c612543e817999a628a1a354e97fc2bac2b7e41d87298b89738ae4ec1656f56054ce4a56c530cd99472d8b989c07a7b69de60e93cbbc56b8b9ba8890894973c021e60a2654d1eace7cc0b66276ae871d3e5a97ebe28871499c09455568f9d1a310480b485a06eb8dd232a34cd46704fd76ec75e8588314dc80e73725197175141c5a5aafd838a2aa3098dc14706b48c0f5a23cb8480f791a88bdda7241109c346f260251c9972224d626a0a235b0982e338ebbc3fc5c857adc800542795989d345c7e63bd05db6e3f6f0ac229fdd9b9d1d36d4d542579d53f41e8ec7dbf64ebabfa59d03461ff7cac617b615b4749dce22d813447e124457e10a7bf30b706cfd0b8d6e4eb93c5e9e638364d2030f169ba7f5bcc998dbda3f8cdcfd0f0abd089152a67332c62489444af790c90383ef15ea31853d4c502e49ce1ce0598ccde3852a508fbc1b9186a52c08db89d9cc8254de921776fb303e2b8a1d09f263653420a346b4b3237d081261560189582f3848d5702ea3e4c9c5453337365809321a746dd7cdefdf639ce25b8d4f834979bbcf4dfe1f2cd6e56bbf73749ecd2f160e9d7005978642819a74b1d838b7f0b412dbabde81d0d8ee86632143694895d41d875244f4a8039fda4d09aaf1dc860afd50c27155811659553f8e04c4eb8d27b5746577e350dd35bcaa684babc10cc22f8bac2499fe55e34d</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[Reading] (Perceptual Decision Making) Decoding a Perceptual Decision Process across Cortex</title>
    <link href="http://yoursite.com/2020/05/18/Reading-2005-Decoding-a-Perceptual-Decision-Process-across-Cortex/"/>
    <id>http://yoursite.com/2020/05/18/Reading-2005-Decoding-a-Perceptual-Decision-Process-across-Cortex/</id>
    <published>2020-05-18T16:21:42.000Z</published>
    <updated>2021-07-23T18:18:17.882Z</updated>
    
    <content type="html"><![CDATA[<center><ol><li>cortex 多个不同的区域 共同影响 perceptual decision</li><li>1 采用多个对照实验设计，研究对不同频率 frequency 刺激的 不同响应</li><li>2 人/大脑 对 f2 （后者） 的响应 weightes more</li><li>大脑areas in cortex 会读取 working memory 来比对相关信息 (past information on which decision is based)</li></ol></center><a id="more"></a><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p><strong>Perceptual decisions</strong> arise from the activity of neurons <strong>distributed across brain circuits</strong>. </p><p>But, decoding the mechanisms behind this cognitive operation across brain circuits has long posed a difficult problem.</p><p>We recorded the neuronal activity of diverse cortical areas, while monkeys performed a vibrotactile discrimination task. </p><p>We find that the encoding of the stimuli during the stimulus periods, working memory, and comparison periods is widely distributed across cortical areas.</p><p>Notably, during the comparison and postponed decision report periods<br>the activity of <strong>frontal brain circuits</strong> encode both<br>the result of the <strong>sensory evaluation</strong> that corresponds to the monkey’s possible choices and<br><strong>past information</strong> on which the decision is based. </p><p>These results suggest that frontal lobe circuits are more engaged in the <strong>readout of sensory information from working memory</strong>, when it is required to be <strong>compared</strong> with other sensory inputs, than simply engaged in motor responses during this task.</p><hr><h2 id="Experiment"><a href="#Experiment" class="headerlink" title="Experiment"></a>Experiment</h2><p><img data-src="/image/reading/2005-Decoding-a-Perceptual-Decision-Process-across-Cortex.png" alt=""></p><hr><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>It is noticed that there can be a higher bias (weight) for upcoming frequency/stimulation.<br>For the upcoming stimulation, more attention are supposed to be paid (“prepare for a future action” as mentioned in the article)<br>While paying attention, it is supposed that the cortical signals are enhanced (or the signal noise decreased).</p><p>Could the “attention” be an explanation for the higher weight or bias for the upcoming stimulation?</p><hr><h2 id="Authors-and-institutes"><a href="#Authors-and-institutes" class="headerlink" title="Authors and institutes"></a>Authors and institutes</h2><p>Adrian Hernandez,1 Veronica Nacher,1 Rogelio Luna,1 Antonio Zainos,1 Luis Lemus,1 Manuel Alvarez,1 Yuriria Vazquez,1 Liliana Camarillo,1 and Ranulfo Romo1,* </p><p>1Instituto de Fisiologıa Celular-Neurociencias, Universidad Nacional Autonoma de Mexico, 04510 Mexico, D.F., Mexico</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;

&lt;ol&gt;
&lt;li&gt;cortex 多个不同的区域 共同影响 perceptual decision&lt;/li&gt;
&lt;li&gt;1 采用多个对照实验设计，研究对不同频率 frequency 刺激的 不同响应&lt;/li&gt;
&lt;li&gt;2 人/大脑 对 f2 （后者） 的响应 weightes more&lt;/li&gt;
&lt;li&gt;大脑areas in cortex 会读取 working memory 来比对相关信息 (past information on which decision is based)&lt;/li&gt;
&lt;/ol&gt;
&lt;/center&gt;
    
    </summary>
    
    
      <category term="Reading" scheme="http://yoursite.com/categories/Reading/"/>
    
    
  </entry>
  
  <entry>
    <title>[Reading] Neural evidence for inequality-averse social preference</title>
    <link href="http://yoursite.com/2020/05/11/Reading-2005-Neural-evidence-for-inequality-averse-social-preference/"/>
    <id>http://yoursite.com/2020/05/11/Reading-2005-Neural-evidence-for-inequality-averse-social-preference/</id>
    <published>2020-05-11T14:05:21.000Z</published>
    <updated>2021-07-23T18:18:17.883Z</updated>
    
    <content type="html"><![CDATA[<center>人类的行为，趋于使众人感受到平等ventral striatum & ventromedial prefrontal cortexsocial equality (preference)</center><a id="more"></a><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>社会科学中流行的假设是，人类有社会偏好来减少结果分配中的不平等，因为这会对他们的经验回报产生负面影响。<br>尽管有大量的行为和人类学证据与这些理论的预测一致，但没有直接的神经证据表明存在不平等厌恶偏好。这样的证据将特别有用，因为某些与不平等结果不一样的行为也可以由对社会形象7或互惠性8，9的关注来解释，这不需要直接避免不平等。<br>在这里，我们使用功能性MRI来直接测试人脑中是否存在不平等厌恶的社会偏好。不平等是通过招募成对的学科并给其中一个学科提供巨额资金而造成的。当两个受试者都评估了从实验者到他们自己以及到另一个参与者的进一步的货币转移时，我们测量了腹侧纹状体和腹侧前额叶皮层的神经反应，这两个区域已被证明涉及金钱和主要奖励的评估社会和非社会环境10-14。<br>与社会偏好的不平等规避模型相一致，我们发现在“高薪”科目中，这些领域的活动对他人转移的反应比对自我的反应更快，而“低薪”科目的活动则相反图案。这些结果为此类模型的有效性提供了直接证据，并且还表明了大脑的奖赏电路对有利和不利的不平等都敏感。</p><p>A popular hypothesis in the social sciences is that humans have social preferences to reduce inequality in outcome distributions because it has a negative impact on their experienced reward.<br>Although there is a large body of behavioural and anthropological evidence consistent with the predictions of these theories1,4–6, there is no direct neural evidence for the existence of inequalityaverse preferences. Such evidence would be especially useful because some behaviours that are consistent with a dislike for unequal outcomes could also be explained by concerns for social image7 or reciprocity8,9, which do not require a direct aversion towards inequality. Here we use functional MRI to test directly for the existence of inequality-averse social preferences in the human brain. Inequality was created by recruiting pairs of subjects and giving one of them a large monetary endowment. While both subjects evaluated further monetary transfers from the experimenter to themselves and to the other participant, we measured neural responses in the ventral striatum and ventromedial prefrontal cortex, two areas that have been shown to be involved in the valuation of monetary and primary rewards in both social and non-social contexts10–14. Consistent with inequality-averse models of social preferences, we find that activity in these areas was more responsive to transfers to others than to self in the ‘high-pay’ subject, whereas the activity of the ‘low-pay’ subject showed the opposite pattern. These results provide direct evidence for the validity of this class of models, and also show that the brain’s reward circuitry is sensitive to both advantageous and disadvantageous inequality.</p><hr><h2 id="Experiment"><a href="#Experiment" class="headerlink" title="Experiment"></a>Experiment</h2><p>30 + 50/0 -&gt; rating</p><hr><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>One experiment designed to eliminate the influence of “wealth effect” from equality consideration where subjects have the same initial wealth.</p><p>Compared with the experiment they conducted before, the variance changed here is the initial wealth, and the conclusion is there is no significant difference in the rating of the two group. Does this experiment just emphasised the importance of the “wealth effect” instead of eliminate the effect?</p><p>If so, how could a experiment designed to eliminate the effect of “wealth effect” then? </p><p>( From my point of view, to build up an equality consideration environment, an inequality should be built first and wealth effect should be considered inside and therefore there is no need to eliminate the “wealth effect”.</p><hr><h2 id="Authors-and-institutes"><a href="#Authors-and-institutes" class="headerlink" title="Authors and institutes"></a>Authors and institutes</h2>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;
人类的行为，趋于使众人感受到平等
ventral striatum &amp; ventromedial prefrontal cortex
social equality (preference)

&lt;/center&gt;
    
    </summary>
    
    
      <category term="Reading" scheme="http://yoursite.com/categories/Reading/"/>
    
    
  </entry>
  
  <entry>
    <title>[Reading] Monkeys reject unequal pay</title>
    <link href="http://yoursite.com/2020/05/11/Reading-2005-Monkeys-reject-unequal-pay/"/>
    <id>http://yoursite.com/2020/05/11/Reading-2005-Monkeys-reject-unequal-pay/</id>
    <published>2020-05-11T14:04:38.000Z</published>
    <updated>2021-07-23T18:18:17.883Z</updated>
    
    <content type="html"><![CDATA[<center><p>Abstract$^2$: </p></center><a id="more"></a><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>在合作的发展过程中，个人将自己的努力和回报与他人的努力进行比较可能已变得至关重要。</p><p>当违反期望时，可能会发生负面反应。<br>一种理论认为，对不平等的厌恶可以在理性选择模型的范围内解释人类合作，并且实际上可能比以前的解释更具包容性。<br>尽管在细节上存在着实质性的文化差异，但这种“公平感”可能是人类的普遍存在，在各种情况下都普遍存在。</p><p>但是，我们并不是唯一的<strong>合作(cooperation)</strong>动物，因此，<strong>不平等厌恶(unequal aversion)</strong>可能不是人类特有的。<br>许多高度合作的非人类物种似乎受到对合作成果和资源分配的一系列期望的指导。</p><p>在这里，我们证明了非人类的灵长类动物，棕色卷尾猴（Cebus apella）， 在与人类实验者的交流中对不均等的奖励分配做出了负面反应。<br>如果猴子目睹某个特定物种获得同等努力而获得更诱人的奖励，则拒绝参与；如果伴侣完全不付出任何努力就获得了这种奖励，这种影响就会放大。这些反应支持不平等厌恶的早期进化起源。</p><p>During the evolution of cooperation it may have become critical for individuals to compare their own efforts and pay-offs with those of others. Negative reactions may occur when expectations are violated. One theory proposes that aversion to inequity can explain human cooperation within the bounds of the rational choice model, and may in fact be more inclusive than previous explanations. Although there exists substantial cultural variation in its particulars, this ‘sense of fairness’ is probably a human universal that has been shown to prevail in a wide variety of circumstances. However, we are not the only cooperative animals, hence inequity aversion may not be uniquely human. Many highly cooperative nonhuman species seem guided by a set of expectations about the outcome of cooperation and the division of resources. Here we demonstrate that a nonhuman primate, the brown capuchin monkey (Cebus apella), responds negatively to unequal reward distribution in exchanges with a human experimenter. Monkeys refused to participate if they witnessed a conspecific obtain a more attractive reward for equal effort, an effect amplified if the partner received such a reward without any effort at all. These reactions support an early evolutionary origin of inequity aversion.</p><hr><h2 id="Experiment"><a href="#Experiment" class="headerlink" title="Experiment"></a>Experiment</h2><p>token - fruit (cucumber/grape)</p><hr><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>it is known that capuchin monkey live in a matriarchal society. Could the higher sensitivity of female monkey due to the higher corporation demand?</p><hr><h2 id="Authors-and-institutes"><a href="#Authors-and-institutes" class="headerlink" title="Authors and institutes"></a>Authors and institutes</h2>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;

&lt;p&gt;Abstract$^2$: &lt;/p&gt;
&lt;/center&gt;
    
    </summary>
    
    
      <category term="Reading" scheme="http://yoursite.com/categories/Reading/"/>
    
    
  </entry>
  
  <entry>
    <title>[Reading] (Perceptual decision making) Perceptual Classification in a Rapidly Changing Environment</title>
    <link href="http://yoursite.com/2020/05/04/Reading-2005-Perceptual-Classification-in-a-Rapidly-Changing-Environment/"/>
    <id>http://yoursite.com/2020/05/04/Reading-2005-Perceptual-Classification-in-a-Rapidly-Changing-Environment/</id>
    <published>2020-05-04T08:03:50.000Z</published>
    <updated>2021-07-23T18:18:17.883Z</updated>
    
    <content type="html"><![CDATA[<center></center><a id="more"></a><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><hr><h2 id="Experiment"><a href="#Experiment" class="headerlink" title="Experiment"></a>Experiment</h2><p><img data-src="/image/reading/.png" alt=""></p><hr><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><hr><h2 id="Authors-and-institutes"><a href="#Authors-and-institutes" class="headerlink" title="Authors and institutes"></a>Authors and institutes</h2>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;



&lt;/center&gt;
    
    </summary>
    
    
      <category term="Reading" scheme="http://yoursite.com/categories/Reading/"/>
    
    
  </entry>
  
  <entry>
    <title>[Reading] (Social decision making) Giving is self rewarding for monkeys</title>
    <link href="http://yoursite.com/2020/05/04/Reading-2005-Giving-is-self-rewarding-for-monkeys/"/>
    <id>http://yoursite.com/2020/05/04/Reading-2005-Giving-is-self-rewarding-for-monkeys/</id>
    <published>2020-05-04T07:55:24.000Z</published>
    <updated>2021-07-23T18:18:17.883Z</updated>
    
    <content type="html"><![CDATA[<p>Social decision making<br>kin/non-kin partner would lead to prosocial preferences than strangers</p><a id="more"></a><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>Helping and sharing among humans is often motivated by empathy and accompanied by a sense of satisfaction. To determine whether similar self-rewarding mechanisms may underpin assistance among nonhuman primates, eight female brown capuchin monkeys (Cebus apella) underwent testing in a simple choice paradigm. Paired with a partner, subjects could select either a “selfish” option that rewarded only themselves, or a “prosocial” option that rewarded both of them. Subjects systematically favored the prosocial option provided their partner was a) familiar,b) visible, and c) receiving rewards of equal value. Prosocial tendencies increased with social closeness, being lowest toward strangers and highest toward kin. That the monkeys understood the options was suggested by greater orientation to the partner during prosocial than selfish choices. Prosocial preferences were reduced by inequity, when the partner received a superior reward. If the view between both monkeys was blocked, choices became strikingly selfish. Thus, under certain conditions, delivering benefits to others seems gratifying to nonhuman primates</p><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Could the inequity of the amount of reward (e.g. 1 banana and 2 banana) reveals better the inequity than the type of reward (e.g. apple and banana)?<br>What could be the reward related to oneself after a social interaction is made?</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Social decision making&lt;br&gt;kin/non-kin partner would lead to prosocial preferences than strangers&lt;/p&gt;
    
    </summary>
    
    
      <category term="Reading" scheme="http://yoursite.com/categories/Reading/"/>
    
    
  </entry>
  
  <entry>
    <title>Open Source Datasets</title>
    <link href="http://yoursite.com/2020/05/03/2020SUMMARY-Open-Source-Datasets/"/>
    <id>http://yoursite.com/2020/05/03/2020SUMMARY-Open-Source-Datasets/</id>
    <published>2020-05-03T20:12:52.000Z</published>
    <updated>2021-07-23T18:18:17.877Z</updated>
    
    <content type="html"><![CDATA[<p>EEG</p><a id="more"></a><p><strong>EEG Motor Movement/Imagery Dataset</strong><br><a href="https://physionet.org/content/eegmmidb/1.0.0/">https://physionet.org/content/eegmmidb/1.0.0/</a></p><p><strong>SpamAssassin Public Corpus</strong><br><a href="https://spamassassin.apache.org/old/publiccorpus/">https://spamassassin.apache.org/old/publiccorpus/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;EEG&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[Reading] Prediction error in reinfoecement learning &amp; [Reading] learning the value of information in an uncertain world</title>
    <link href="http://yoursite.com/2020/04/28/Reading-2004-prediction-error-in-reinfoecement-learning-and-learning-the-value-of-information-in-an-uncertain-world/"/>
    <id>http://yoursite.com/2020/04/28/Reading-2004-prediction-error-in-reinfoecement-learning-and-learning-the-value-of-information-in-an-uncertain-world/</id>
    <published>2020-04-28T14:05:09.000Z</published>
    <updated>2021-07-23T18:18:17.882Z</updated>
    
    <content type="html"><![CDATA[<center>(1/大数据的整合分析)striatum - dorsal and ventral regions - instrumental and Pavlovian reinforcementstriatum - reward prediction errorinsula and habenula - aversive prediction error<p>(2/)<br>ACC (anterior cingulate cortex) - learning rate - recent experience<br>one Bayesan learner model - predicts better than reinforcement learning</p></center><a id="more"></a><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>(1/大数据的整合分析)<br>striatum - dorsal and ventral regions - instrumental and Pavlovian reinforcement<br>striatum - reward prediction error<br>insula and habenula - aversive prediction error</p><p>(2/)<br>ACC (anterior cingulate cortex) - learning rate - recent experience<br>one Bayesan learner model - predicts better than reinforcement learning</p><hr><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>meta-analysis of neuroimaging studies:</p><p>What’s the difference between instrumental &amp; Pavlovian prediction error and reward &amp; punishment?<br>How the effect of Dopamine’s effect on vascular mechanisms influences the final result of neuronal activities and how could this influence be eliminated.</p><p>Could the Bayesian learner model be used for modifying the reinforcement learning model and how?</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;
(1/大数据的整合分析)
striatum - dorsal and ventral regions - instrumental and Pavlovian reinforcement
striatum - reward prediction error
insula and habenula - aversive prediction error

&lt;p&gt;(2/)&lt;br&gt;ACC (anterior cingulate cortex) - learning rate - recent experience&lt;br&gt;one Bayesan learner model - predicts better than reinforcement learning&lt;/p&gt;
&lt;/center&gt;
    
    </summary>
    
    
      <category term="Reading" scheme="http://yoursite.com/categories/Reading/"/>
    
    
  </entry>
  
  <entry>
    <title>[Reading] BOLD repsonses reflecting dopaminergic signals in the huamn ventral tegmental area VTA</title>
    <link href="http://yoursite.com/2020/04/20/Reading-2004-BOLD-repsonses-reflecting-dopaminergic-signals-in-the-huamn-ventral-tegmental-area-VTA/"/>
    <id>http://yoursite.com/2020/04/20/Reading-2004-BOLD-repsonses-reflecting-dopaminergic-signals-in-the-huamn-ventral-tegmental-area-VTA/</id>
    <published>2020-04-20T21:34:41.000Z</published>
    <updated>2021-07-23T18:18:17.882Z</updated>
    
    <content type="html"><![CDATA[<center><p><strong>VStr</strong> encodes positive and negative reward prediction errors<br><strong>VTA BOLD</strong> responses is found reflecting <strong>positive</strong> reward prediction errors<br>no significant response to nonrewarding events</p></center><a id="more"></a><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>Current theories hypothesize that dopamine neuronal firing encodes reward prediction errors.<br>Although studies in nonhuman species provide direct support for this theory, functional magnetic resonance imaging (fMRI) studies in humans have focused on brain areas targeted by <strong>dopamine neurons [ventral striatum (VStr)]</strong> rather than on <strong>brainstem dopaminergic nuclei [ventral tegmental area (VTA) and substantia nigra]</strong>.<br>We used fMRI tailored to directly image the brainstem.<br>When primary rewards were used in an experiment, the VTA blood oxygen level–dependent (BOLD) response reflected a positive reward prediction error, whereas the <strong>VStr encoded positive and negative reward prediction errors</strong>.<br>When monetary gains and losses were used, <strong>VTA BOLD</strong> responses reflected <strong>positive</strong> reward prediction errors modulated by the probability of winning. We detected no significant VTA BOLD response to nonrewarding events.</p><hr><h2 id="Experiment"><a href="#Experiment" class="headerlink" title="Experiment"></a>Experiment</h2><p><img data-src="/image/reading/2004-BOLD-VTA-SN.png" alt=""></p><p><img data-src="/image/reading/2004-BOLD-VStr.png" alt=""></p><p><img data-src="/image/reading/2004-BOLD-VTA-2.png" alt=""></p><p><img data-src="/image/reading/2004-BOLD-VTA.png" alt=""></p><hr><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Why with the increase of winning probability, the positive reward prediction error signal should decrease and negative prediciton error signal should increase in magnitude, could the theory reinforcement learning model be explained a bit?</p><p>How is the effect of large pulsatile blood vessels effect near brainstem structure eliminated with the functional data synchronized with the participants’ cardiac cycles.</p><hr><h2 id="Authors-and-institutes"><a href="#Authors-and-institutes" class="headerlink" title="Authors and institutes"></a>Authors and institutes</h2><p>Kimberlee D’Ardenne, Samuel M. McClure, Leigh E. Nystrom, Jonathan D. Cohen</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;

&lt;p&gt;&lt;strong&gt;VStr&lt;/strong&gt; encodes positive and negative reward prediction errors&lt;br&gt;&lt;strong&gt;VTA BOLD&lt;/strong&gt; responses is found reflecting &lt;strong&gt;positive&lt;/strong&gt; reward prediction errors&lt;br&gt;no significant response to nonrewarding events&lt;/p&gt;
&lt;/center&gt;
    
    </summary>
    
    
      <category term="Reading" scheme="http://yoursite.com/categories/Reading/"/>
    
    
      <category term="BOLD" scheme="http://yoursite.com/tags/BOLD/"/>
    
      <category term="VTA" scheme="http://yoursite.com/tags/VTA/"/>
    
      <category term="reward" scheme="http://yoursite.com/tags/reward/"/>
    
      <category term="VStr" scheme="http://yoursite.com/tags/VStr/"/>
    
  </entry>
  
  <entry>
    <title>[Coding] &quot;Coding 2004 Ubuntu&quot;</title>
    <link href="http://yoursite.com/2020/04/15/Coding-2004-Ubuntu/"/>
    <id>http://yoursite.com/2020/04/15/Coding-2004-Ubuntu/</id>
    <published>2020-04-15T17:19:49.000Z</published>
    <updated>2021-07-23T18:18:17.879Z</updated>
    
    <content type="html"><![CDATA[<center></center><a id="more"></a><h2 id="操作指令集"><a href="#操作指令集" class="headerlink" title="操作指令集"></a>操作指令集</h2><table><thead><tr><th>操作命令行</th><th>作用</th></tr></thead><tbody><tr><td><strong>文件操作</strong></td><td></td></tr><tr><td>解压.tar.gz文件</td><td><code>tar -zxvf filename.tar.gz</code></td></tr><tr><td>安装文件</td><td><code>./name.sh</code></td></tr><tr><td>下载文件</td><td><code>wget &quot;http://domain.com/directory/4?action=AttachFile&amp;do=view&amp;target=file.tgz&quot;</code></td></tr><tr><td>下载到指定目录</td><td><code>wget  -P /home/omio/Desktop/ &quot;http://thecanadiantestbox.x10.mx/CC.zip&quot;</code></td></tr><tr><td>下载到指定目录并更改名字</td><td><code>wget  -O /home/omio/Desktop/NewFileName &quot;http://thecanadiantestbox.x10.mx/CC.zip&quot;</code></td></tr><tr><td><strong>软件安装</strong></td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;

&lt;/center&gt;
    
    </summary>
    
    
      <category term="coding" scheme="http://yoursite.com/categories/coding/"/>
    
    
  </entry>
  
  <entry>
    <title>[Coding] Git and Github</title>
    <link href="http://yoursite.com/2020/04/15/Coding-2004-Git/"/>
    <id>http://yoursite.com/2020/04/15/Coding-2004-Git/</id>
    <published>2020-04-14T22:00:00.000Z</published>
    <updated>2021-07-23T18:18:17.879Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/u012526120/article/details/49401871">Git ang Github basic commands 安装与使用</a></p><a id="more"></a><h2 id="git-安装与配置"><a href="#git-安装与配置" class="headerlink" title="git 安装与配置"></a>git 安装与配置</h2><p>安装git<br><code>sudo apt-get install git</code><br>设置用户名和邮箱<br><code>git config --global user.name &quot;YOUR NAME&quot;</code><br><code>git config --global user.email &quot;YOUR EMAIL ADDRESS&quot;</code></p><h2 id="git-指令"><a href="#git-指令" class="headerlink" title="git 指令"></a>git 指令</h2><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td><strong>add</strong></td><td>添加文件内容至索引</td></tr><tr><td>bisect</td><td>通过二分查找定位引入 bug 的变更</td></tr><tr><td>branch</td><td>列出、创建或删除分支</td></tr><tr><td>checkout</td><td>检出一个分支或路径到工作区</td></tr><tr><td><strong>clone</strong></td><td>克隆一个版本库到一个新目录</td></tr><tr><td><strong>commit</strong></td><td>记录变更到版本库</td></tr><tr><td><em>diff</em></td><td>显示提交之间、提交和工作区之间等的差异</td></tr><tr><td>fetch</td><td>从另外一个版本库下载对象和引用</td></tr><tr><td>grep</td><td>输出和模式匹配的行</td></tr><tr><td><strong>init</strong></td><td>创建一个空的 Git 版本库或重新初始化一个已存在的版本库</td></tr><tr><td><em>log</em></td><td>显示提交日志</td></tr><tr><td>merge</td><td>合并两个或更多开发历史</td></tr><tr><td>mv</td><td>移动或重命名一个文件、目录或符号链接</td></tr><tr><td><strong>pull</strong></td><td>获取并整合另外的版本库或一个本地分支</td></tr><tr><td><strong>push</strong></td><td>更新远程引用和相关的对象</td></tr><tr><td>rebase</td><td>本地提交转移至更新后的上游分支中</td></tr><tr><td><em>reset</em></td><td>重置当前HEAD到指定状态</td></tr><tr><td>rm</td><td>从工作区和索引中删除文件</td></tr><tr><td>show</td><td>显示各种类型的对象</td></tr><tr><td><em>status</em></td><td>显示工作区状态</td></tr><tr><td>tag</td><td>创建、列出、删除或校验一个GPG签名的 tag 对象</td></tr></tbody></table><h2 id="创建本地版本库"><a href="#创建本地版本库" class="headerlink" title="创建本地版本库"></a>创建本地版本库</h2><ol><li><p>新建文件夹 创建新的 repository<br><code>mkdir learngit</code><br><code>cd learngit</code></p></li><li><p>repository 初始化<br><code>git init</code></p></li><li><p>文件夹添加文件<br><code>git add filename.cpp</code></p></li><li><p>提交到 repository (-m “提交说明/描述”)<br><code>git commit -m &quot;add a new file&quot;</code></p></li></ol><h2 id="添加远程仓库-github连接"><a href="#添加远程仓库-github连接" class="headerlink" title="添加远程仓库(github连接)"></a>添加远程仓库(github连接)</h2><p><strong>A. SSH 加密传输</strong></p><ol><li><p>创建SSH key<br><code>ssh-keygen -t rsa -C &quot;myemail@example.com&quot;</code><br>usr/.ssh - id_rsa(私钥) id_rsa.pub(公钥)</p></li><li><p>Github 登录 - Account settings - SSH Keys 粘贴 id_rsa.pub</p></li><li><p>关联本地仓库 (origin 代表远程库，git 默认叫法)<br><code>git remote add origin git@github.com:jaitoh/learngit.git</code></p></li><li><p>第一次推送本地库内容到github -u<br><code>git push -u origin master</code></p></li><li><p>修改内容再次推送到github仓库:<br><code>git push origin master</code></p></li></ol><p><strong>B. HTTPS 连接</strong><br>不需要SSH key, 其余操作相同， 3.关联仓库命令不同：<br><code>git remote add origin https://github.com/jaitoh/learngit.git</code></p><h2 id="从github克隆"><a href="#从github克隆" class="headerlink" title="从github克隆"></a>从github克隆</h2><ol><li><p>github 上创建新库 learngit, 勾选README选项</p></li><li><p>克隆到本地</p></li></ol><p>SSH 连接： <code>git clone git@github.com:jaitoh/learngit.git</code></p><p>HTTPS连接:<code>git clone https://github.com/jaitoh/learngit.git</code></p><ol start="3"><li>本地修改代码， 推送到github库:<br><code>git push origin master</code></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/u012526120/article/details/49401871&quot;&gt;Git ang Github basic commands 安装与使用&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="coding" scheme="http://yoursite.com/categories/coding/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>[Video] 2020 Video List</title>
    <link href="http://yoursite.com/2020/04/07/2020SUMMARY-Video-List/"/>
    <id>http://yoursite.com/2020/04/07/2020SUMMARY-Video-List/</id>
    <published>2020-04-07T15:03:41.000Z</published>
    <updated>2021-07-23T18:18:17.877Z</updated>
    
    <content type="html"><![CDATA[<center><p>  2004 自制酸奶</p></center><a id="more"></a><p>Free software FXhome:<br><a href="https://fxhome.com/software-install/hitfilm-express">HitFilm Download link</a> [:](heyvinci@outlook - FMV<strong>****</strong>)</p><hr><p>2004 自制酸奶</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;

&lt;p&gt;  2004 自制酸奶&lt;/p&gt;
&lt;/center&gt;
    
    </summary>
    
    
      <category term="Video" scheme="http://yoursite.com/categories/Video/"/>
    
    
      <category term="video" scheme="http://yoursite.com/tags/video/"/>
    
  </entry>
  
  <entry>
    <title>[Lecture] Medical Neuroscience Duke Coursera</title>
    <link href="http://yoursite.com/2020/04/05/Lecture-2004-Coursera-Medical-Neuroscience-Duke/"/>
    <id>http://yoursite.com/2020/04/05/Lecture-2004-Coursera-Medical-Neuroscience-Duke/</id>
    <published>2020-04-05T15:23:38.000Z</published>
    <updated>2021-07-23T18:18:17.880Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="Week-1"><a href="#Week-1" class="headerlink" title="Week 1"></a>Week 1</h2><hr><h2 id="Week-2"><a href="#Week-2" class="headerlink" title="Week 2"></a>Week 2</h2><hr><h2 id="Week-3"><a href="#Week-3" class="headerlink" title="Week 3"></a>Week 3</h2><hr><h2 id="Week-4"><a href="#Week-4" class="headerlink" title="Week 4"></a>Week 4</h2><hr><h2 id="Week-5"><a href="#Week-5" class="headerlink" title="Week 5"></a>Week 5</h2><hr><h2 id="Week-6"><a href="#Week-6" class="headerlink" title="Week 6"></a>Week 6</h2><hr><h2 id="Week-7"><a href="#Week-7" class="headerlink" title="Week 7"></a>Week 7</h2><hr><h2 id="Week-8"><a href="#Week-8" class="headerlink" title="Week 8"></a>Week 8</h2><hr><h2 id="Week-9"><a href="#Week-9" class="headerlink" title="Week 9"></a>Week 9</h2><hr><h2 id="Week-10"><a href="#Week-10" class="headerlink" title="Week 10"></a>Week 10</h2><hr><h2 id="Week-11"><a href="#Week-11" class="headerlink" title="Week 11"></a>Week 11</h2><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Week-1&quot;&gt;&lt;a href=&quot;#Week-1&quot; class=&quot;headerlink&quot; title=&quot;Week 1&quot;&gt;&lt;/a&gt;Week 1&lt;/h2&gt;&lt;hr&gt;
&lt;h2 id=&quot;Week-2&quot;&gt;&lt;a href=&quot;#Week-2&quot; 
      
    
    </summary>
    
    
      <category term="Lecture" scheme="http://yoursite.com/categories/Lecture/"/>
    
    
      <category term="Neuroscience" scheme="http://yoursite.com/tags/Neuroscience/"/>
    
  </entry>
  
</feed>
